{"ast":null,"code":"import io from 'socket.io-client';\nlet socket = null;\nlet socketListeners = [];\n\n/**\n * Get or initialize the socket connection\n * @returns {Socket} The socket instance\n */\nexport const getSocket = () => {\n  if (!socket) {\n    // Create new socket connection\n    socket = io(process.env.REACT_APP_API_URL);\n    console.log('Socket connection established');\n\n    // Apply any registered listeners\n    socketListeners.forEach(({\n      event,\n      callback\n    }) => {\n      socket.on(event, callback);\n    });\n  }\n  return socket;\n};\n\n/**\n * Register an event listener that persists across reconnections\n * @param {string} event - The event name\n * @param {function} callback - The callback function\n */\nexport const onSocketEvent = (event, callback) => {\n  // Store the listener for reconnections\n  socketListeners.push({\n    event,\n    callback\n  });\n\n  // If socket exists, add the listener immediately\n  if (socket) {\n    socket.on(event, callback);\n  }\n};\n\n/**\n * Remove a specific event listener\n * @param {string} event - The event name\n * @param {function} callback - The callback function to remove\n */\nexport const offSocketEvent = (event, callback) => {\n  // Remove from our tracking array\n  socketListeners = socketListeners.filter(listener => !(listener.event === event && listener.callback === callback));\n\n  // Remove from socket if it exists\n  if (socket) {\n    socket.off(event, callback);\n  }\n};\n\n/**\n * Close the socket connection\n */\nexport const closeSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n    socketListeners = [];\n    console.log('Socket connection closed');\n  }\n};\n\n/**\n * Join a ticket room\n * @param {string} ticketId - The ticket ID to join\n */\nexport const joinTicketRoom = ticketId => {\n  const socket = getSocket();\n  socket.emit('join_ticket', ticketId);\n};\n\n/**\n * Join the technician room\n */\nexport const joinTechnicianRoom = () => {\n  const socket = getSocket();\n  socket.emit('joinTechnicianRoom');\n};\n\n/**\n * Leave the technician room\n */\nexport const leaveTechnicianRoom = () => {\n  const socket = getSocket();\n  socket.emit('leaveTechnicianRoom');\n};\n\n/**\n * Send a message to a ticket room\n * @param {Object} data - The message data\n */\nexport const sendTicketMessage = data => {\n  const socket = getSocket();\n  socket.emit('ticket_message', data);\n};","map":{"version":3,"names":["io","socket","socketListeners","getSocket","process","env","REACT_APP_API_URL","console","log","forEach","event","callback","on","onSocketEvent","push","offSocketEvent","filter","listener","off","closeSocket","disconnect","joinTicketRoom","ticketId","emit","joinTechnicianRoom","leaveTechnicianRoom","sendTicketMessage","data"],"sources":["C:/Users/sayda/CascadeProjects/beta-tech-support/frontend/src/services/socketService.js"],"sourcesContent":["import io from 'socket.io-client';\n\nlet socket = null;\nlet socketListeners = [];\n\n/**\n * Get or initialize the socket connection\n * @returns {Socket} The socket instance\n */\nexport const getSocket = () => {\n  if (!socket) {\n    // Create new socket connection\n    socket = io(process.env.REACT_APP_API_URL);\n    console.log('Socket connection established');\n    \n    // Apply any registered listeners\n    socketListeners.forEach(({ event, callback }) => {\n      socket.on(event, callback);\n    });\n  }\n  return socket;\n};\n\n/**\n * Register an event listener that persists across reconnections\n * @param {string} event - The event name\n * @param {function} callback - The callback function\n */\nexport const onSocketEvent = (event, callback) => {\n  // Store the listener for reconnections\n  socketListeners.push({ event, callback });\n  \n  // If socket exists, add the listener immediately\n  if (socket) {\n    socket.on(event, callback);\n  }\n};\n\n/**\n * Remove a specific event listener\n * @param {string} event - The event name\n * @param {function} callback - The callback function to remove\n */\nexport const offSocketEvent = (event, callback) => {\n  // Remove from our tracking array\n  socketListeners = socketListeners.filter(\n    listener => !(listener.event === event && listener.callback === callback)\n  );\n  \n  // Remove from socket if it exists\n  if (socket) {\n    socket.off(event, callback);\n  }\n};\n\n/**\n * Close the socket connection\n */\nexport const closeSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n    socketListeners = [];\n    console.log('Socket connection closed');\n  }\n};\n\n/**\n * Join a ticket room\n * @param {string} ticketId - The ticket ID to join\n */\nexport const joinTicketRoom = (ticketId) => {\n  const socket = getSocket();\n  socket.emit('join_ticket', ticketId);\n};\n\n/**\n * Join the technician room\n */\nexport const joinTechnicianRoom = () => {\n  const socket = getSocket();\n  socket.emit('joinTechnicianRoom');\n};\n\n/**\n * Leave the technician room\n */\nexport const leaveTechnicianRoom = () => {\n  const socket = getSocket();\n  socket.emit('leaveTechnicianRoom');\n};\n\n/**\n * Send a message to a ticket room\n * @param {Object} data - The message data\n */\nexport const sendTicketMessage = (data) => {\n  const socket = getSocket();\n  socket.emit('ticket_message', data);\n};\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,kBAAkB;AAEjC,IAAIC,MAAM,GAAG,IAAI;AACjB,IAAIC,eAAe,GAAG,EAAE;;AAExB;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAC7B,IAAI,CAACF,MAAM,EAAE;IACX;IACAA,MAAM,GAAGD,EAAE,CAACI,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAC;IAC1CC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;;IAE5C;IACAN,eAAe,CAACO,OAAO,CAAC,CAAC;MAAEC,KAAK;MAAEC;IAAS,CAAC,KAAK;MAC/CV,MAAM,CAACW,EAAE,CAACF,KAAK,EAAEC,QAAQ,CAAC;IAC5B,CAAC,CAAC;EACJ;EACA,OAAOV,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMY,aAAa,GAAGA,CAACH,KAAK,EAAEC,QAAQ,KAAK;EAChD;EACAT,eAAe,CAACY,IAAI,CAAC;IAAEJ,KAAK;IAAEC;EAAS,CAAC,CAAC;;EAEzC;EACA,IAAIV,MAAM,EAAE;IACVA,MAAM,CAACW,EAAE,CAACF,KAAK,EAAEC,QAAQ,CAAC;EAC5B;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,cAAc,GAAGA,CAACL,KAAK,EAAEC,QAAQ,KAAK;EACjD;EACAT,eAAe,GAAGA,eAAe,CAACc,MAAM,CACtCC,QAAQ,IAAI,EAAEA,QAAQ,CAACP,KAAK,KAAKA,KAAK,IAAIO,QAAQ,CAACN,QAAQ,KAAKA,QAAQ,CAC1E,CAAC;;EAED;EACA,IAAIV,MAAM,EAAE;IACVA,MAAM,CAACiB,GAAG,CAACR,KAAK,EAAEC,QAAQ,CAAC;EAC7B;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMQ,WAAW,GAAGA,CAAA,KAAM;EAC/B,IAAIlB,MAAM,EAAE;IACVA,MAAM,CAACmB,UAAU,CAAC,CAAC;IACnBnB,MAAM,GAAG,IAAI;IACbC,eAAe,GAAG,EAAE;IACpBK,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EACzC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMa,cAAc,GAAIC,QAAQ,IAAK;EAC1C,MAAMrB,MAAM,GAAGE,SAAS,CAAC,CAAC;EAC1BF,MAAM,CAACsB,IAAI,CAAC,aAAa,EAAED,QAAQ,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,kBAAkB,GAAGA,CAAA,KAAM;EACtC,MAAMvB,MAAM,GAAGE,SAAS,CAAC,CAAC;EAC1BF,MAAM,CAACsB,IAAI,CAAC,oBAAoB,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,mBAAmB,GAAGA,CAAA,KAAM;EACvC,MAAMxB,MAAM,GAAGE,SAAS,CAAC,CAAC;EAC1BF,MAAM,CAACsB,IAAI,CAAC,qBAAqB,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,iBAAiB,GAAIC,IAAI,IAAK;EACzC,MAAM1B,MAAM,GAAGE,SAAS,CAAC,CAAC;EAC1BF,MAAM,CAACsB,IAAI,CAAC,gBAAgB,EAAEI,IAAI,CAAC;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}