{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayda\\\\CascadeProjects\\\\beta-tech-support\\\\frontend\\\\src\\\\components\\\\notifications\\\\TicketNotification.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Snackbar, Alert, Button } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketNotification = () => {\n  _s();\n  const [notification, setNotification] = useState(null);\n  const [socket, setSocket] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Connect to socket server\n    const newSocket = io(process.env.REACT_APP_API_URL);\n    setSocket(newSocket);\n\n    // If user is a technician, join the technician room\n    const userType = localStorage.getItem('userType');\n    if (userType === 'technician') {\n      newSocket.emit('joinTechnicianRoom');\n    }\n\n    // Listen for new tickets\n    newSocket.on('newTicket', data => {\n      setNotification({\n        type: 'new',\n        message: `New ${data.priority} priority ${data.type} ticket: ${data.description}`,\n        ticketId: data.ticketId\n      });\n    });\n\n    // Listen for ticket assignments\n    newSocket.on('ticketAssigned', data => {\n      setNotification({\n        type: 'assigned',\n        message: `Ticket #${data.ticketId} assigned to ${data.assignedTo}`,\n        ticketId: data.ticketId\n      });\n    });\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, []);\n  const handleClose = () => {\n    setNotification(null);\n  };\n  const handleViewTicket = () => {\n    navigate(`/tickets/${notification.ticketId}`);\n    handleClose();\n  };\n  if (!notification) return null;\n  return /*#__PURE__*/_jsxDEV(Snackbar, {\n    open: Boolean(notification),\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    children: /*#__PURE__*/_jsxDEV(Alert, {\n      severity: notification.type === 'new' ? 'info' : 'success',\n      onClose: handleClose,\n      action: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"inherit\",\n        size: \"small\",\n        onClick: handleViewTicket,\n        children: \"View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this),\n      children: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(TicketNotification, \"CFGLSItCJ5JIU4cRItA8CIPehDs=\", false, function () {\n  return [useNavigate];\n});\n_c = TicketNotification;\nexport default TicketNotification;\nvar _c;\n$RefreshReg$(_c, \"TicketNotification\");","map":{"version":3,"names":["React","useEffect","useState","Snackbar","Alert","Button","useNavigate","io","jsxDEV","_jsxDEV","TicketNotification","_s","notification","setNotification","socket","setSocket","navigate","newSocket","process","env","REACT_APP_API_URL","userType","localStorage","getItem","emit","on","data","type","message","priority","description","ticketId","assignedTo","disconnect","handleClose","handleViewTicket","open","Boolean","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","children","severity","action","color","size","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sayda/CascadeProjects/beta-tech-support/frontend/src/components/notifications/TicketNotification.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Snackbar, Alert, Button } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport io from 'socket.io-client';\n\nconst TicketNotification = () => {\n  const [notification, setNotification] = useState(null);\n  const [socket, setSocket] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Connect to socket server\n    const newSocket = io(process.env.REACT_APP_API_URL);\n    setSocket(newSocket);\n\n    // If user is a technician, join the technician room\n    const userType = localStorage.getItem('userType');\n    if (userType === 'technician') {\n      newSocket.emit('joinTechnicianRoom');\n    }\n\n    // Listen for new tickets\n    newSocket.on('newTicket', (data) => {\n      setNotification({\n        type: 'new',\n        message: `New ${data.priority} priority ${data.type} ticket: ${data.description}`,\n        ticketId: data.ticketId\n      });\n    });\n\n    // Listen for ticket assignments\n    newSocket.on('ticketAssigned', (data) => {\n      setNotification({\n        type: 'assigned',\n        message: `Ticket #${data.ticketId} assigned to ${data.assignedTo}`,\n        ticketId: data.ticketId\n      });\n    });\n\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, []);\n\n  const handleClose = () => {\n    setNotification(null);\n  };\n\n  const handleViewTicket = () => {\n    navigate(`/tickets/${notification.ticketId}`);\n    handleClose();\n  };\n\n  if (!notification) return null;\n\n  return (\n    <Snackbar\n      open={Boolean(notification)}\n      autoHideDuration={6000}\n      onClose={handleClose}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n    >\n      <Alert\n        severity={notification.type === 'new' ? 'info' : 'success'}\n        onClose={handleClose}\n        action={\n          <Button color=\"inherit\" size=\"small\" onClick={handleViewTicket}>\n            View\n          </Button>\n        }\n      >\n        {notification.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default TicketNotification;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}