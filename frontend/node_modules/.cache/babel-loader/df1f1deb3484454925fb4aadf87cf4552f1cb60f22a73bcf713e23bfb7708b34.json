{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayda\\\\CascadeProjects\\\\beta-tech-support\\\\frontend\\\\src\\\\components\\\\notifications\\\\TicketNotification.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { onSocketEvent, offSocketEvent } from '../../services/socketService';\nimport { Box, Button, Divider, IconButton, List, ListItem, ListItemText, Popover, Typography, Tooltip, Zoom } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport MarkChatReadIcon from '@mui/icons-material/MarkChatRead';\nimport MarkChatUnreadIcon from '@mui/icons-material/MarkChatUnread';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport NotificationBadge from './NotificationBadge';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TicketNotification = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const navigate = useNavigate();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [anchorEl, setAnchorEl] = useState(null);\n  useEffect(() => {\n    // Load notifications from localStorage on component mount\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsedNotifications = JSON.parse(savedNotifications);\n      setNotifications(parsedNotifications);\n      setUnreadCount(parsedNotifications.filter(notification => !notification.read).length);\n    }\n\n    // Setup socket event listeners based on user role\n    if (user) {\n      // New ticket notification (for technicians and admins)\n      if (user.role === 'technician' || user.role === 'admin') {\n        onSocketEvent('new_ticket', handleNewTicket);\n        onSocketEvent('ticket_assigned', handleTicketAssigned);\n      }\n\n      // Ticket accepted notification (for clients)\n      if (user.role === 'client') {\n        onSocketEvent('ticket_accepted', handleTicketAccepted);\n      }\n\n      // New message notification (for all users)\n      onSocketEvent('new_message_notification', handleNewMessage);\n      onSocketEvent('message_received', handleMessageReceived);\n    }\n\n    // Cleanup event listeners on component unmount\n    return () => {\n      if (user) {\n        if (user.role === 'technician' || user.role === 'admin') {\n          offSocketEvent('new_ticket', handleNewTicket);\n          offSocketEvent('ticket_assigned', handleTicketAssigned);\n        }\n        if (user.role === 'client') {\n          offSocketEvent('ticket_accepted', handleTicketAccepted);\n        }\n        offSocketEvent('new_message_notification', handleNewMessage);\n        offSocketEvent('message_received', handleMessageReceived);\n      }\n    };\n  }, [user]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    if (notifications.length > 0) {\n      localStorage.setItem('notifications', JSON.stringify(notifications));\n      const newUnreadCount = notifications.filter(notification => !notification.read).length;\n      setUnreadCount(newUnreadCount);\n\n      // Dispatch event for other components to update their notification count\n      window.dispatchEvent(new CustomEvent('notificationUpdate', {\n        detail: {\n          unreadCount: newUnreadCount\n        }\n      }));\n    } else {\n      localStorage.removeItem('notifications');\n      setUnreadCount(0);\n\n      // Dispatch event with zero count\n      window.dispatchEvent(new CustomEvent('notificationUpdate', {\n        detail: {\n          unreadCount: 0\n        }\n      }));\n    }\n  }, [notifications]);\n\n  // Handler for new ticket notifications\n  const handleNewTicket = data => {\n    const newNotification = {\n      id: `ticket_${data.ticketId}_${Date.now()}`,\n      type: 'new_ticket',\n      title: 'New Ticket',\n      message: `New ticket #${data.ticketNumber} created by ${data.clientName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n  };\n\n  // Handler for ticket assignment notifications\n  const handleTicketAssigned = data => {\n    const newNotification = {\n      id: `assigned_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_assigned',\n      title: 'Ticket Assigned',\n      message: `Ticket #${data.ticketNumber} assigned to ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n  };\n\n  // Handler for ticket acceptance notifications\n  const handleTicketAccepted = data => {\n    const newNotification = {\n      id: `accepted_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_accepted',\n      title: 'Ticket Accepted',\n      message: `Your ticket has been accepted by ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n  };\n\n  // Handler for new message notifications\n  const handleNewMessage = data => {\n    const newNotification = {\n      id: `message_${data.messageId}_${Date.now()}`,\n      type: 'new_message',\n      title: 'New Message',\n      message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n  };\n\n  // Handler for message received in current ticket view\n  const handleMessageReceived = data => {\n    // Only create notification if the message is not from the current user\n    if (data.senderId !== user.userId) {\n      const newNotification = {\n        id: `message_${data.messageId}_${Date.now()}`,\n        type: 'new_message',\n        title: 'New Message',\n        message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n        ticketId: data.ticketId,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n\n      // Check if we're not already on this ticket's page\n      const currentPath = window.location.pathname;\n      const ticketPath = `/tickets/${data.ticketId}`;\n      if (!currentPath.includes(ticketPath)) {\n        addNotification(newNotification);\n      }\n    }\n  };\n\n  // Add a new notification to the list\n  const addNotification = notification => {\n    setNotifications(prev => {\n      // Limit to 20 notifications\n      const updated = [notification, ...prev].slice(0, 20);\n      return updated;\n    });\n  };\n\n  // Handle click on notification icon\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  // Handle close of notification menu\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  // Handle click on a notification\n  const handleNotificationClick = notification => {\n    // Mark notification as read\n    markAsRead(notification.id);\n\n    // Navigate to the ticket\n    navigate(`/tickets/${notification.ticketId}`);\n\n    // Close the notification menu\n    handleClose();\n  };\n\n  // Mark a notification as read\n  const markAsRead = notificationId => {\n    setNotifications(prev => prev.map(notification => notification.id === notificationId ? {\n      ...notification,\n      read: true\n    } : notification));\n  };\n\n  // Mark all notifications as read\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(notification => ({\n      ...notification,\n      read: true\n    })));\n  };\n\n  // Remove a notification\n  const removeNotification = notificationId => {\n    setNotifications(prev => prev.filter(notification => notification.id !== notificationId));\n  };\n\n  // Clear all notifications\n  const clearAllNotifications = () => {\n    setNotifications([]);\n    localStorage.removeItem('notifications');\n    handleClose();\n  };\n\n  // Format timestamp to relative time\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInSeconds = Math.floor((now - date) / 1000);\n    if (diffInSeconds < 60) {\n      return 'Just now';\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60);\n      return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;\n    } else if (diffInSeconds < 86400) {\n      const hours = Math.floor(diffInSeconds / 3600);\n      return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;\n    } else {\n      const days = Math.floor(diffInSeconds / 86400);\n      return `${days} ${days === 1 ? 'day' : 'days'} ago`;\n    }\n  };\n\n  // Get icon for notification type\n  const getNotificationIcon = type => {\n    switch (type) {\n      case 'new_ticket':\n        return /*#__PURE__*/_jsxDEV(AccessTimeIcon, {\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 16\n        }, this);\n      case 'ticket_assigned':\n      case 'ticket_accepted':\n        return /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n          color: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 16\n        }, this);\n      case 'new_message':\n        return /*#__PURE__*/_jsxDEV(MarkChatUnreadIcon, {\n          color: \"info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 16\n        }, this);\n      default:\n        return null;\n    }\n  };\n  const open = Boolean(anchorEl);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NotificationBadge, {\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Popover, {\n      id: \"notifications-menu\",\n      anchorEl: anchorEl,\n      open: open,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      PaperProps: {\n        style: {\n          maxHeight: '400px',\n          width: '350px'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 1,\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          bgcolor: 'primary.main',\n          color: 'white'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          fontWeight: \"bold\",\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [unreadCount > 0 && /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Mark all as read\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              color: \"inherit\",\n              onClick: markAllAsRead,\n              children: /*#__PURE__*/_jsxDEV(MarkChatReadIcon, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this), notifications.length > 0 && /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Clear all notifications\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              color: \"inherit\",\n              onClick: clearAllNotifications,\n              children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), notifications.length === 0 ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 2,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: \"No notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(List, {\n        sx: {\n          p: 0\n        },\n        children: notifications.map(notification => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            alignItems: \"flex-start\",\n            button: true,\n            onClick: () => handleNotificationClick(notification),\n            sx: {\n              bgcolor: notification.read ? 'transparent' : 'rgba(25, 118, 210, 0.08)',\n              '&:hover': {\n                bgcolor: 'rgba(0, 0, 0, 0.04)'\n              },\n              transition: 'background-color 0.2s'\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  mr: 1,\n                  mt: 0.5\n                },\n                children: getNotificationIcon(notification.type)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  flexGrow: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'flex-start'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle2\",\n                    fontWeight: \"bold\",\n                    children: notification.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 358,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"caption\",\n                    color: \"text.secondary\",\n                    children: formatTimestamp(notification.timestamp)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 361,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.primary\",\n                  children: notification.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            component: \"li\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 17\n          }, this)]\n        }, notification.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this), notifications.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 1,\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          onClick: clearAllNotifications,\n          color: \"primary\",\n          children: \"Clear All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(TicketNotification, \"Ig2OoUuiWtT874cJTTJVnw+oSd0=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = TicketNotification;\nexport default TicketNotification;\nvar _c;\n$RefreshReg$(_c, \"TicketNotification\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useAuth","onSocketEvent","offSocketEvent","Box","Button","Divider","IconButton","List","ListItem","ListItemText","Popover","Typography","Tooltip","Zoom","CloseIcon","CheckCircleIcon","MarkChatReadIcon","MarkChatUnreadIcon","AccessTimeIcon","NotificationBadge","jsxDEV","_jsxDEV","Fragment","_Fragment","TicketNotification","_s","user","navigate","notifications","setNotifications","unreadCount","setUnreadCount","anchorEl","setAnchorEl","savedNotifications","localStorage","getItem","parsedNotifications","JSON","parse","filter","notification","read","length","role","handleNewTicket","handleTicketAssigned","handleTicketAccepted","handleNewMessage","handleMessageReceived","setItem","stringify","newUnreadCount","window","dispatchEvent","CustomEvent","detail","removeItem","data","newNotification","id","ticketId","Date","now","type","title","message","ticketNumber","clientName","timestamp","toISOString","addNotification","technicianName","messageId","senderName","senderId","userId","currentPath","location","pathname","ticketPath","includes","prev","updated","slice","handleClick","event","currentTarget","handleClose","handleNotificationClick","markAsRead","notificationId","map","markAllAsRead","removeNotification","clearAllNotifications","formatTimestamp","date","diffInSeconds","Math","floor","minutes","hours","days","getNotificationIcon","color","fileName","_jsxFileName","lineNumber","columnNumber","open","Boolean","children","onClick","onClose","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","style","maxHeight","width","sx","p","display","justifyContent","alignItems","bgcolor","variant","fontWeight","size","fontSize","textAlign","button","transition","mr","mt","flexGrow","component","_c","$RefreshReg$"],"sources":["C:/Users/sayda/CascadeProjects/beta-tech-support/frontend/src/components/notifications/TicketNotification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { onSocketEvent, offSocketEvent } from '../../services/socketService';\nimport {\n  Box,\n  Button,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  Popover,\n  Typography,\n  Tooltip,\n  Zoom\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport MarkChatReadIcon from '@mui/icons-material/MarkChatRead';\nimport MarkChatUnreadIcon from '@mui/icons-material/MarkChatUnread';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport NotificationBadge from './NotificationBadge';\n\nconst TicketNotification = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  useEffect(() => {\n    // Load notifications from localStorage on component mount\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsedNotifications = JSON.parse(savedNotifications);\n      setNotifications(parsedNotifications);\n      setUnreadCount(parsedNotifications.filter(notification => !notification.read).length);\n    }\n\n    // Setup socket event listeners based on user role\n    if (user) {\n      // New ticket notification (for technicians and admins)\n      if (user.role === 'technician' || user.role === 'admin') {\n        onSocketEvent('new_ticket', handleNewTicket);\n        onSocketEvent('ticket_assigned', handleTicketAssigned);\n      }\n\n      // Ticket accepted notification (for clients)\n      if (user.role === 'client') {\n        onSocketEvent('ticket_accepted', handleTicketAccepted);\n      }\n\n      // New message notification (for all users)\n      onSocketEvent('new_message_notification', handleNewMessage);\n      onSocketEvent('message_received', handleMessageReceived);\n    }\n\n    // Cleanup event listeners on component unmount\n    return () => {\n      if (user) {\n        if (user.role === 'technician' || user.role === 'admin') {\n          offSocketEvent('new_ticket', handleNewTicket);\n          offSocketEvent('ticket_assigned', handleTicketAssigned);\n        }\n\n        if (user.role === 'client') {\n          offSocketEvent('ticket_accepted', handleTicketAccepted);\n        }\n\n        offSocketEvent('new_message_notification', handleNewMessage);\n        offSocketEvent('message_received', handleMessageReceived);\n      }\n    };\n  }, [user]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    if (notifications.length > 0) {\n      localStorage.setItem('notifications', JSON.stringify(notifications));\n      const newUnreadCount = notifications.filter(notification => !notification.read).length;\n      setUnreadCount(newUnreadCount);\n      \n      // Dispatch event for other components to update their notification count\n      window.dispatchEvent(new CustomEvent('notificationUpdate', {\n        detail: { unreadCount: newUnreadCount }\n      }));\n    } else {\n      localStorage.removeItem('notifications');\n      setUnreadCount(0);\n      \n      // Dispatch event with zero count\n      window.dispatchEvent(new CustomEvent('notificationUpdate', {\n        detail: { unreadCount: 0 }\n      }));\n    }\n  }, [notifications]);\n\n  // Handler for new ticket notifications\n  const handleNewTicket = (data) => {\n    const newNotification = {\n      id: `ticket_${data.ticketId}_${Date.now()}`,\n      type: 'new_ticket',\n      title: 'New Ticket',\n      message: `New ticket #${data.ticketNumber} created by ${data.clientName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n  };\n\n  // Handler for ticket assignment notifications\n  const handleTicketAssigned = (data) => {\n    const newNotification = {\n      id: `assigned_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_assigned',\n      title: 'Ticket Assigned',\n      message: `Ticket #${data.ticketNumber} assigned to ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n  };\n\n  // Handler for ticket acceptance notifications\n  const handleTicketAccepted = (data) => {\n    const newNotification = {\n      id: `accepted_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_accepted',\n      title: 'Ticket Accepted',\n      message: `Your ticket has been accepted by ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n  };\n\n  // Handler for new message notifications\n  const handleNewMessage = (data) => {\n    const newNotification = {\n      id: `message_${data.messageId}_${Date.now()}`,\n      type: 'new_message',\n      title: 'New Message',\n      message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n  };\n\n  // Handler for message received in current ticket view\n  const handleMessageReceived = (data) => {\n    // Only create notification if the message is not from the current user\n    if (data.senderId !== user.userId) {\n      const newNotification = {\n        id: `message_${data.messageId}_${Date.now()}`,\n        type: 'new_message',\n        title: 'New Message',\n        message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n        ticketId: data.ticketId,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n      \n      // Check if we're not already on this ticket's page\n      const currentPath = window.location.pathname;\n      const ticketPath = `/tickets/${data.ticketId}`;\n      \n      if (!currentPath.includes(ticketPath)) {\n        addNotification(newNotification);\n      }\n    }\n  };\n\n  // Add a new notification to the list\n  const addNotification = (notification) => {\n    setNotifications(prev => {\n      // Limit to 20 notifications\n      const updated = [notification, ...prev].slice(0, 20);\n      return updated;\n    });\n  };\n\n  // Handle click on notification icon\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  // Handle close of notification menu\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  // Handle click on a notification\n  const handleNotificationClick = (notification) => {\n    // Mark notification as read\n    markAsRead(notification.id);\n    \n    // Navigate to the ticket\n    navigate(`/tickets/${notification.ticketId}`);\n    \n    // Close the notification menu\n    handleClose();\n  };\n\n  // Mark a notification as read\n  const markAsRead = (notificationId) => {\n    setNotifications(prev => \n      prev.map(notification => \n        notification.id === notificationId \n          ? { ...notification, read: true } \n          : notification\n      )\n    );\n  };\n\n  // Mark all notifications as read\n  const markAllAsRead = () => {\n    setNotifications(prev => \n      prev.map(notification => ({ ...notification, read: true }))\n    );\n  };\n\n  // Remove a notification\n  const removeNotification = (notificationId) => {\n    setNotifications(prev => \n      prev.filter(notification => notification.id !== notificationId)\n    );\n  };\n\n  // Clear all notifications\n  const clearAllNotifications = () => {\n    setNotifications([]);\n    localStorage.removeItem('notifications');\n    handleClose();\n  };\n\n  // Format timestamp to relative time\n  const formatTimestamp = (timestamp) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInSeconds = Math.floor((now - date) / 1000);\n    \n    if (diffInSeconds < 60) {\n      return 'Just now';\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60);\n      return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;\n    } else if (diffInSeconds < 86400) {\n      const hours = Math.floor(diffInSeconds / 3600);\n      return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;\n    } else {\n      const days = Math.floor(diffInSeconds / 86400);\n      return `${days} ${days === 1 ? 'day' : 'days'} ago`;\n    }\n  };\n\n  // Get icon for notification type\n  const getNotificationIcon = (type) => {\n    switch (type) {\n      case 'new_ticket':\n        return <AccessTimeIcon color=\"primary\" />;\n      case 'ticket_assigned':\n      case 'ticket_accepted':\n        return <CheckCircleIcon color=\"success\" />;\n      case 'new_message':\n        return <MarkChatUnreadIcon color=\"info\" />;\n      default:\n        return null;\n    }\n  };\n\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <NotificationBadge onClick={handleClick} />\n      \n      <Popover\n        id=\"notifications-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        PaperProps={{\n          style: {\n            maxHeight: '400px',\n            width: '350px',\n          },\n        }}\n      >\n        <Box sx={{ p: 1, display: 'flex', justifyContent: 'space-between', alignItems: 'center', bgcolor: 'primary.main', color: 'white' }}>\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n            Notifications\n          </Typography>\n          <Box>\n            {unreadCount > 0 && (\n              <Tooltip title=\"Mark all as read\">\n                <IconButton size=\"small\" color=\"inherit\" onClick={markAllAsRead}>\n                  <MarkChatReadIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            )}\n            {notifications.length > 0 && (\n              <Tooltip title=\"Clear all notifications\">\n                <IconButton size=\"small\" color=\"inherit\" onClick={clearAllNotifications}>\n                  <CloseIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            )}\n          </Box>\n        </Box>\n        <Divider />\n        \n        {notifications.length === 0 ? (\n          <Box sx={{ p: 2, textAlign: 'center' }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No notifications\n            </Typography>\n          </Box>\n        ) : (\n          <List sx={{ p: 0 }}>\n            {notifications.map((notification) => (\n              <React.Fragment key={notification.id}>\n                <ListItem\n                  alignItems=\"flex-start\"\n                  button\n                  onClick={() => handleNotificationClick(notification)}\n                  sx={{\n                    bgcolor: notification.read ? 'transparent' : 'rgba(25, 118, 210, 0.08)',\n                    '&:hover': {\n                      bgcolor: 'rgba(0, 0, 0, 0.04)'\n                    },\n                    transition: 'background-color 0.2s'\n                  }}\n                >\n                  <Box sx={{ display: 'flex', width: '100%' }}>\n                    <Box sx={{ mr: 1, mt: 0.5 }}>\n                      {getNotificationIcon(notification.type)}\n                    </Box>\n                    <Box sx={{ flexGrow: 1 }}>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n                        <Typography variant=\"subtitle2\" fontWeight=\"bold\">\n                          {notification.title}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {formatTimestamp(notification.timestamp)}\n                        </Typography>\n                      </Box>\n                      <Typography variant=\"body2\" color=\"text.primary\">\n                        {notification.message}\n                      </Typography>\n                    </Box>\n                  </Box>\n                </ListItem>\n                <Divider component=\"li\" />\n              </React.Fragment>\n            ))}\n          </List>\n        )}\n        \n        {notifications.length > 0 && (\n          <Box sx={{ p: 1, display: 'flex', justifyContent: 'center' }}>\n            <Button size=\"small\" onClick={clearAllNotifications} color=\"primary\">\n              Clear All\n            </Button>\n          </Box>\n        )}\n      </Popover>\n    </>\n  );\n};\n\nexport default TicketNotification;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}