{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayda\\\\CascadeProjects\\\\beta-tech-support\\\\frontend\\\\src\\\\components\\\\notifications\\\\TicketNotification.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Snackbar, Alert, Button, Stack } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { onSocketEvent, offSocketEvent, joinTechnicianRoom, joinUserRoom } from '../../services/socketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketNotification = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const {\n    user\n  } = useAuth();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!user || !user._id) return;\n\n    // Join the user's personal room for notifications\n    joinUserRoom(user._id);\n\n    // If user is a technician, join the technician room\n    if (user.role === 'technician') {\n      joinTechnicianRoom();\n    }\n\n    // Setup event handlers for notifications\n    const handleNewTicket = data => {\n      addNotification({\n        type: 'new_ticket',\n        severity: 'info',\n        message: `New ${data.priority} priority ticket: ${data.description.substring(0, 30)}...`,\n        ticketId: data.ticketId\n      });\n    };\n    const handleTicketAssigned = data => {\n      addNotification({\n        type: 'ticket_assigned',\n        severity: 'success',\n        message: `Ticket has been assigned to ${data.technicianName}`,\n        ticketId: data.ticketId\n      });\n    };\n    const handleTicketAssignedToYou = data => {\n      addNotification({\n        type: 'ticket_assigned_to_you',\n        severity: 'success',\n        message: `Ticket #${data.ticketNumber} has been assigned to you`,\n        ticketId: data.ticketId\n      });\n    };\n    const handleTicketAccepted = data => {\n      addNotification({\n        type: 'ticket_accepted',\n        severity: 'success',\n        message: `Your ticket has been accepted by ${data.technicianName}`,\n        ticketId: data.ticketId\n      });\n    };\n    const handleNewMessage = data => {\n      addNotification({\n        type: 'new_message',\n        severity: 'info',\n        message: `New message from ${data.sender.name}`,\n        ticketId: data.ticketId\n      });\n    };\n\n    // Register event listeners\n    onSocketEvent('new_ticket', handleNewTicket);\n    onSocketEvent('ticket_assigned', handleTicketAssigned);\n    onSocketEvent('ticket_assigned_to_you', handleTicketAssignedToYou);\n    onSocketEvent('ticket_accepted', handleTicketAccepted);\n    onSocketEvent('new_message_notification', handleNewMessage);\n\n    // Cleanup function\n    return () => {\n      // Remove event listeners\n      offSocketEvent('new_ticket', handleNewTicket);\n      offSocketEvent('ticket_assigned', handleTicketAssigned);\n      offSocketEvent('ticket_assigned_to_you', handleTicketAssignedToYou);\n      offSocketEvent('ticket_accepted', handleTicketAccepted);\n      offSocketEvent('new_message_notification', handleNewMessage);\n    };\n  }, [user]);\n  const addNotification = notification => {\n    // Add a unique ID and auto-remove after timeout\n    const notificationWithId = {\n      ...notification,\n      id: Date.now(),\n      autoHideDuration: 6000\n    };\n    setNotifications(prev => [...prev, notificationWithId]);\n\n    // Auto-remove after duration\n    setTimeout(() => {\n      removeNotification(notificationWithId.id);\n    }, notificationWithId.autoHideDuration);\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n  const handleViewTicket = ticketId => {\n    navigate(`/tickets/${ticketId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    spacing: 2,\n    sx: {\n      position: 'fixed',\n      top: 24,\n      right: 24,\n      zIndex: 2000\n    },\n    children: notifications.map(notification => /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: true,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      sx: {\n        position: 'relative',\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: notification.severity,\n        onClose: () => removeNotification(notification.id),\n        action: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"inherit\",\n          size: \"small\",\n          onClick: () => handleViewTicket(notification.ticketId),\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this),\n        children: notification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, notification.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(TicketNotification, \"n6UxIN+ENFmG+uw0TA2PzjaqiwM=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = TicketNotification;\nexport default TicketNotification;\nvar _c;\n$RefreshReg$(_c, \"TicketNotification\");","map":{"version":3,"names":["React","useEffect","useState","Snackbar","Alert","Button","Stack","useNavigate","useAuth","onSocketEvent","offSocketEvent","joinTechnicianRoom","joinUserRoom","jsxDEV","_jsxDEV","TicketNotification","_s","notifications","setNotifications","user","navigate","_id","role","handleNewTicket","data","addNotification","type","severity","message","priority","description","substring","ticketId","handleTicketAssigned","technicianName","handleTicketAssignedToYou","ticketNumber","handleTicketAccepted","handleNewMessage","sender","name","notification","notificationWithId","id","Date","now","autoHideDuration","prev","setTimeout","removeNotification","filter","handleViewTicket","spacing","sx","position","top","right","zIndex","children","map","open","anchorOrigin","vertical","horizontal","mt","onClose","action","color","size","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sayda/CascadeProjects/beta-tech-support/frontend/src/components/notifications/TicketNotification.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Snackbar, Alert, Button, Stack } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { \n  onSocketEvent, \n  offSocketEvent, \n  joinTechnicianRoom, \n  joinUserRoom \n} from '../../services/socketService';\n\nconst TicketNotification = () => {\n  const [notifications, setNotifications] = useState([]);\n  const { user } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!user || !user._id) return;\n\n    // Join the user's personal room for notifications\n    joinUserRoom(user._id);\n    \n    // If user is a technician, join the technician room\n    if (user.role === 'technician') {\n      joinTechnicianRoom();\n    }\n\n    // Setup event handlers for notifications\n    const handleNewTicket = (data) => {\n      addNotification({\n        type: 'new_ticket',\n        severity: 'info',\n        message: `New ${data.priority} priority ticket: ${data.description.substring(0, 30)}...`,\n        ticketId: data.ticketId\n      });\n    };\n\n    const handleTicketAssigned = (data) => {\n      addNotification({\n        type: 'ticket_assigned',\n        severity: 'success',\n        message: `Ticket has been assigned to ${data.technicianName}`,\n        ticketId: data.ticketId\n      });\n    };\n    \n    const handleTicketAssignedToYou = (data) => {\n      addNotification({\n        type: 'ticket_assigned_to_you',\n        severity: 'success',\n        message: `Ticket #${data.ticketNumber} has been assigned to you`,\n        ticketId: data.ticketId\n      });\n    };\n\n    const handleTicketAccepted = (data) => {\n      addNotification({\n        type: 'ticket_accepted',\n        severity: 'success',\n        message: `Your ticket has been accepted by ${data.technicianName}`,\n        ticketId: data.ticketId\n      });\n    };\n    \n    const handleNewMessage = (data) => {\n      addNotification({\n        type: 'new_message',\n        severity: 'info',\n        message: `New message from ${data.sender.name}`,\n        ticketId: data.ticketId\n      });\n    };\n\n    // Register event listeners\n    onSocketEvent('new_ticket', handleNewTicket);\n    onSocketEvent('ticket_assigned', handleTicketAssigned);\n    onSocketEvent('ticket_assigned_to_you', handleTicketAssignedToYou);\n    onSocketEvent('ticket_accepted', handleTicketAccepted);\n    onSocketEvent('new_message_notification', handleNewMessage);\n\n    // Cleanup function\n    return () => {\n      // Remove event listeners\n      offSocketEvent('new_ticket', handleNewTicket);\n      offSocketEvent('ticket_assigned', handleTicketAssigned);\n      offSocketEvent('ticket_assigned_to_you', handleTicketAssignedToYou);\n      offSocketEvent('ticket_accepted', handleTicketAccepted);\n      offSocketEvent('new_message_notification', handleNewMessage);\n    };\n  }, [user]);\n\n  const addNotification = (notification) => {\n    // Add a unique ID and auto-remove after timeout\n    const notificationWithId = {\n      ...notification,\n      id: Date.now(),\n      autoHideDuration: 6000\n    };\n    \n    setNotifications(prev => [...prev, notificationWithId]);\n    \n    // Auto-remove after duration\n    setTimeout(() => {\n      removeNotification(notificationWithId.id);\n    }, notificationWithId.autoHideDuration);\n  };\n\n  const removeNotification = (id) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n\n  const handleViewTicket = (ticketId) => {\n    navigate(`/tickets/${ticketId}`);\n  };\n\n  return (\n    <Stack spacing={2} sx={{ position: 'fixed', top: 24, right: 24, zIndex: 2000 }}>\n      {notifications.map((notification) => (\n        <Snackbar\n          key={notification.id}\n          open={true}\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n          sx={{ position: 'relative', mt: 2 }}\n        >\n          <Alert\n            severity={notification.severity}\n            onClose={() => removeNotification(notification.id)}\n            action={\n              <Button color=\"inherit\" size=\"small\" onClick={() => handleViewTicket(notification.ticketId)}>\n                View\n              </Button>\n            }\n          >\n            {notification.message}\n          </Alert>\n        </Snackbar>\n      ))}\n    </Stack>\n  );\n};\n\nexport default TicketNotification;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}