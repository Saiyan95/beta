{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayda\\\\CascadeProjects\\\\beta-tech-support\\\\frontend\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { onSocketEvent, offSocketEvent } from '../services/socketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [notificationSound] = useState(new Audio('/notification.mp3'));\n\n  // Load notifications from localStorage on mount\n  useEffect(() => {\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      try {\n        const parsedNotifications = JSON.parse(savedNotifications);\n        setNotifications(parsedNotifications);\n        setUnreadCount(parsedNotifications.filter(notification => !notification.read).length);\n      } catch (error) {\n        console.error('Error parsing notifications from localStorage:', error);\n        localStorage.removeItem('notifications');\n      }\n    }\n  }, []);\n\n  // Setup socket event listeners based on user role\n  useEffect(() => {\n    if (!user) return;\n\n    // New ticket notification (for technicians and admins)\n    if (user.role === 'technician' || user.role === 'admin') {\n      onSocketEvent('new_ticket', handleNewTicket);\n      onSocketEvent('ticket_assigned', handleTicketAssigned);\n    }\n\n    // Ticket accepted notification (for clients)\n    if (user.role === 'client') {\n      onSocketEvent('ticket_accepted', handleTicketAccepted);\n    }\n\n    // New message notification (for all users)\n    onSocketEvent('new_message_notification', handleNewMessage);\n    onSocketEvent('message_received', handleMessageReceived);\n\n    // Cleanup event listeners on unmount\n    return () => {\n      if (user.role === 'technician' || user.role === 'admin') {\n        offSocketEvent('new_ticket', handleNewTicket);\n        offSocketEvent('ticket_assigned', handleTicketAssigned);\n      }\n      if (user.role === 'client') {\n        offSocketEvent('ticket_accepted', handleTicketAccepted);\n      }\n      offSocketEvent('new_message_notification', handleNewMessage);\n      offSocketEvent('message_received', handleMessageReceived);\n    };\n  }, [user]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    if (notifications.length > 0) {\n      localStorage.setItem('notifications', JSON.stringify(notifications));\n    } else {\n      localStorage.removeItem('notifications');\n    }\n\n    // Update unread count\n    const newUnreadCount = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(newUnreadCount);\n\n    // Dispatch event for other components to update their notification count\n    window.dispatchEvent(new CustomEvent('notificationUpdate', {\n      detail: {\n        unreadCount: newUnreadCount\n      }\n    }));\n  }, [notifications]);\n\n  // Handler for new ticket notifications\n  const handleNewTicket = data => {\n    const newNotification = {\n      id: `ticket_${data.ticketId}_${Date.now()}`,\n      type: 'new_ticket',\n      title: 'New Ticket',\n      message: `New ticket #${data.ticketNumber} created by ${data.clientName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for ticket assignment notifications\n  const handleTicketAssigned = data => {\n    const newNotification = {\n      id: `assigned_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_assigned',\n      title: 'Ticket Assigned',\n      message: `Ticket #${data.ticketNumber} assigned to ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for ticket acceptance notifications\n  const handleTicketAccepted = data => {\n    const newNotification = {\n      id: `accepted_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_accepted',\n      title: 'Ticket Accepted',\n      message: `Your ticket has been accepted by ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for new message notifications\n  const handleNewMessage = data => {\n    const newNotification = {\n      id: `message_${data.messageId}_${Date.now()}`,\n      type: 'new_message',\n      title: 'New Message',\n      message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for message received in current ticket view\n  const handleMessageReceived = data => {\n    // Only create notification if the message is not from the current user\n    if (data.senderId !== (user === null || user === void 0 ? void 0 : user.userId)) {\n      const newNotification = {\n        id: `message_${data.messageId}_${Date.now()}`,\n        type: 'new_message',\n        title: 'New Message',\n        message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n        ticketId: data.ticketId,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n\n      // Check if we're not already on this ticket's page\n      const currentPath = window.location.pathname;\n      const ticketPath = `/tickets/${data.ticketId}`;\n      if (!currentPath.includes(ticketPath)) {\n        addNotification(newNotification);\n        playNotificationSound();\n      }\n    }\n  };\n\n  // Add a new notification to the list\n  const addNotification = notification => {\n    setNotifications(prev => {\n      // Check if this is a duplicate notification (same type and ticketId within last 5 seconds)\n      const isDuplicate = prev.some(n => n.type === notification.type && n.ticketId === notification.ticketId && new Date(notification.timestamp) - new Date(n.timestamp) < 5000);\n      if (isDuplicate) return prev;\n\n      // Limit to 20 notifications\n      return [notification, ...prev].slice(0, 20);\n    });\n  };\n\n  // Play notification sound\n  const playNotificationSound = () => {\n    try {\n      notificationSound.currentTime = 0;\n      notificationSound.play().catch(error => {\n        console.error('Error playing notification sound:', error);\n      });\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  };\n\n  // Mark a notification as read\n  const markAsRead = notificationId => {\n    setNotifications(prev => prev.map(notification => notification.id === notificationId ? {\n      ...notification,\n      read: true\n    } : notification));\n  };\n\n  // Mark all notifications as read\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(notification => ({\n      ...notification,\n      read: true\n    })));\n  };\n\n  // Remove a notification\n  const removeNotification = notificationId => {\n    setNotifications(prev => prev.filter(notification => notification.id !== notificationId));\n  };\n\n  // Clear all notifications\n  const clearAllNotifications = () => {\n    setNotifications([]);\n  };\n\n  // Format timestamp to relative time\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInSeconds = Math.floor((now - date) / 1000);\n    if (diffInSeconds < 60) {\n      return 'Just now';\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60);\n      return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;\n    } else if (diffInSeconds < 86400) {\n      const hours = Math.floor(diffInSeconds / 3600);\n      return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;\n    } else {\n      const days = Math.floor(diffInSeconds / 86400);\n      return `${days} ${days === 1 ? 'day' : 'days'} ago`;\n    }\n  };\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAllNotifications,\n    formatTimestamp\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"6CgnsAdmbFAZ6s5uxePwACFe7xA=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useAuth","onSocketEvent","offSocketEvent","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","NotificationProvider","children","_s2","user","notifications","setNotifications","unreadCount","setUnreadCount","notificationSound","Audio","savedNotifications","localStorage","getItem","parsedNotifications","JSON","parse","filter","notification","read","length","error","console","removeItem","role","handleNewTicket","handleTicketAssigned","handleTicketAccepted","handleNewMessage","handleMessageReceived","setItem","stringify","newUnreadCount","window","dispatchEvent","CustomEvent","detail","data","newNotification","id","ticketId","Date","now","type","title","message","ticketNumber","clientName","timestamp","toISOString","addNotification","playNotificationSound","technicianName","messageId","senderName","senderId","userId","currentPath","location","pathname","ticketPath","includes","prev","isDuplicate","some","n","slice","currentTime","play","catch","markAsRead","notificationId","map","markAllAsRead","removeNotification","clearAllNotifications","formatTimestamp","date","diffInSeconds","Math","floor","minutes","hours","days","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sayda/CascadeProjects/beta-tech-support/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { onSocketEvent, offSocketEvent } from '../services/socketService';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => useContext(NotificationContext);\n\nexport const NotificationProvider = ({ children }) => {\n  const { user } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [notificationSound] = useState(new Audio('/notification.mp3'));\n\n  // Load notifications from localStorage on mount\n  useEffect(() => {\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      try {\n        const parsedNotifications = JSON.parse(savedNotifications);\n        setNotifications(parsedNotifications);\n        setUnreadCount(parsedNotifications.filter(notification => !notification.read).length);\n      } catch (error) {\n        console.error('Error parsing notifications from localStorage:', error);\n        localStorage.removeItem('notifications');\n      }\n    }\n  }, []);\n\n  // Setup socket event listeners based on user role\n  useEffect(() => {\n    if (!user) return;\n    \n    // New ticket notification (for technicians and admins)\n    if (user.role === 'technician' || user.role === 'admin') {\n      onSocketEvent('new_ticket', handleNewTicket);\n      onSocketEvent('ticket_assigned', handleTicketAssigned);\n    }\n\n    // Ticket accepted notification (for clients)\n    if (user.role === 'client') {\n      onSocketEvent('ticket_accepted', handleTicketAccepted);\n    }\n\n    // New message notification (for all users)\n    onSocketEvent('new_message_notification', handleNewMessage);\n    onSocketEvent('message_received', handleMessageReceived);\n\n    // Cleanup event listeners on unmount\n    return () => {\n      if (user.role === 'technician' || user.role === 'admin') {\n        offSocketEvent('new_ticket', handleNewTicket);\n        offSocketEvent('ticket_assigned', handleTicketAssigned);\n      }\n\n      if (user.role === 'client') {\n        offSocketEvent('ticket_accepted', handleTicketAccepted);\n      }\n\n      offSocketEvent('new_message_notification', handleNewMessage);\n      offSocketEvent('message_received', handleMessageReceived);\n    };\n  }, [user]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    if (notifications.length > 0) {\n      localStorage.setItem('notifications', JSON.stringify(notifications));\n    } else {\n      localStorage.removeItem('notifications');\n    }\n    \n    // Update unread count\n    const newUnreadCount = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(newUnreadCount);\n    \n    // Dispatch event for other components to update their notification count\n    window.dispatchEvent(new CustomEvent('notificationUpdate', {\n      detail: { unreadCount: newUnreadCount }\n    }));\n  }, [notifications]);\n\n  // Handler for new ticket notifications\n  const handleNewTicket = (data) => {\n    const newNotification = {\n      id: `ticket_${data.ticketId}_${Date.now()}`,\n      type: 'new_ticket',\n      title: 'New Ticket',\n      message: `New ticket #${data.ticketNumber} created by ${data.clientName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for ticket assignment notifications\n  const handleTicketAssigned = (data) => {\n    const newNotification = {\n      id: `assigned_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_assigned',\n      title: 'Ticket Assigned',\n      message: `Ticket #${data.ticketNumber} assigned to ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for ticket acceptance notifications\n  const handleTicketAccepted = (data) => {\n    const newNotification = {\n      id: `accepted_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_accepted',\n      title: 'Ticket Accepted',\n      message: `Your ticket has been accepted by ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for new message notifications\n  const handleNewMessage = (data) => {\n    const newNotification = {\n      id: `message_${data.messageId}_${Date.now()}`,\n      type: 'new_message',\n      title: 'New Message',\n      message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for message received in current ticket view\n  const handleMessageReceived = (data) => {\n    // Only create notification if the message is not from the current user\n    if (data.senderId !== user?.userId) {\n      const newNotification = {\n        id: `message_${data.messageId}_${Date.now()}`,\n        type: 'new_message',\n        title: 'New Message',\n        message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n        ticketId: data.ticketId,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n      \n      // Check if we're not already on this ticket's page\n      const currentPath = window.location.pathname;\n      const ticketPath = `/tickets/${data.ticketId}`;\n      \n      if (!currentPath.includes(ticketPath)) {\n        addNotification(newNotification);\n        playNotificationSound();\n      }\n    }\n  };\n\n  // Add a new notification to the list\n  const addNotification = (notification) => {\n    setNotifications(prev => {\n      // Check if this is a duplicate notification (same type and ticketId within last 5 seconds)\n      const isDuplicate = prev.some(n => \n        n.type === notification.type && \n        n.ticketId === notification.ticketId &&\n        (new Date(notification.timestamp) - new Date(n.timestamp)) < 5000\n      );\n      \n      if (isDuplicate) return prev;\n      \n      // Limit to 20 notifications\n      return [notification, ...prev].slice(0, 20);\n    });\n  };\n\n  // Play notification sound\n  const playNotificationSound = () => {\n    try {\n      notificationSound.currentTime = 0;\n      notificationSound.play().catch(error => {\n        console.error('Error playing notification sound:', error);\n      });\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  };\n\n  // Mark a notification as read\n  const markAsRead = (notificationId) => {\n    setNotifications(prev => \n      prev.map(notification => \n        notification.id === notificationId \n          ? { ...notification, read: true } \n          : notification\n      )\n    );\n  };\n\n  // Mark all notifications as read\n  const markAllAsRead = () => {\n    setNotifications(prev => \n      prev.map(notification => ({ ...notification, read: true }))\n    );\n  };\n\n  // Remove a notification\n  const removeNotification = (notificationId) => {\n    setNotifications(prev => \n      prev.filter(notification => notification.id !== notificationId)\n    );\n  };\n\n  // Clear all notifications\n  const clearAllNotifications = () => {\n    setNotifications([]);\n  };\n\n  // Format timestamp to relative time\n  const formatTimestamp = (timestamp) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInSeconds = Math.floor((now - date) / 1000);\n    \n    if (diffInSeconds < 60) {\n      return 'Just now';\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60);\n      return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;\n    } else if (diffInSeconds < 86400) {\n      const hours = Math.floor(diffInSeconds / 3600);\n      return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;\n    } else {\n      const days = Math.floor(diffInSeconds / 86400);\n      return `${days} ${days === 1 ? 'day' : 'days'} ago`;\n    }\n  };\n\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAllNotifications,\n    formatTimestamp\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport default NotificationProvider;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,aAAa,EAAEC,cAAc,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,MAAMC,mBAAmB,gBAAGT,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMU,gBAAgB,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMT,UAAU,CAACO,mBAAmB,CAAC;AAAA;AAACE,EAAA,CAAzDD,gBAAgB;AAE7B,OAAO,MAAME,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM;IAAEC;EAAK,CAAC,GAAGX,OAAO,CAAC,CAAC;EAC1B,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACmB,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,IAAIoB,KAAK,CAAC,mBAAmB,CAAC,CAAC;;EAEpE;EACAlB,SAAS,CAAC,MAAM;IACd,MAAMmB,kBAAkB,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAChE,IAAIF,kBAAkB,EAAE;MACtB,IAAI;QACF,MAAMG,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CAACL,kBAAkB,CAAC;QAC1DL,gBAAgB,CAACQ,mBAAmB,CAAC;QACrCN,cAAc,CAACM,mBAAmB,CAACG,MAAM,CAACC,YAAY,IAAI,CAACA,YAAY,CAACC,IAAI,CAAC,CAACC,MAAM,CAAC;MACvF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;QACtET,YAAY,CAACW,UAAU,CAAC,eAAe,CAAC;MAC1C;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA/B,SAAS,CAAC,MAAM;IACd,IAAI,CAACY,IAAI,EAAE;;IAEX;IACA,IAAIA,IAAI,CAACoB,IAAI,KAAK,YAAY,IAAIpB,IAAI,CAACoB,IAAI,KAAK,OAAO,EAAE;MACvD9B,aAAa,CAAC,YAAY,EAAE+B,eAAe,CAAC;MAC5C/B,aAAa,CAAC,iBAAiB,EAAEgC,oBAAoB,CAAC;IACxD;;IAEA;IACA,IAAItB,IAAI,CAACoB,IAAI,KAAK,QAAQ,EAAE;MAC1B9B,aAAa,CAAC,iBAAiB,EAAEiC,oBAAoB,CAAC;IACxD;;IAEA;IACAjC,aAAa,CAAC,0BAA0B,EAAEkC,gBAAgB,CAAC;IAC3DlC,aAAa,CAAC,kBAAkB,EAAEmC,qBAAqB,CAAC;;IAExD;IACA,OAAO,MAAM;MACX,IAAIzB,IAAI,CAACoB,IAAI,KAAK,YAAY,IAAIpB,IAAI,CAACoB,IAAI,KAAK,OAAO,EAAE;QACvD7B,cAAc,CAAC,YAAY,EAAE8B,eAAe,CAAC;QAC7C9B,cAAc,CAAC,iBAAiB,EAAE+B,oBAAoB,CAAC;MACzD;MAEA,IAAItB,IAAI,CAACoB,IAAI,KAAK,QAAQ,EAAE;QAC1B7B,cAAc,CAAC,iBAAiB,EAAEgC,oBAAoB,CAAC;MACzD;MAEAhC,cAAc,CAAC,0BAA0B,EAAEiC,gBAAgB,CAAC;MAC5DjC,cAAc,CAAC,kBAAkB,EAAEkC,qBAAqB,CAAC;IAC3D,CAAC;EACH,CAAC,EAAE,CAACzB,IAAI,CAAC,CAAC;;EAEV;EACAZ,SAAS,CAAC,MAAM;IACd,IAAIa,aAAa,CAACe,MAAM,GAAG,CAAC,EAAE;MAC5BR,YAAY,CAACkB,OAAO,CAAC,eAAe,EAAEf,IAAI,CAACgB,SAAS,CAAC1B,aAAa,CAAC,CAAC;IACtE,CAAC,MAAM;MACLO,YAAY,CAACW,UAAU,CAAC,eAAe,CAAC;IAC1C;;IAEA;IACA,MAAMS,cAAc,GAAG3B,aAAa,CAACY,MAAM,CAACC,YAAY,IAAI,CAACA,YAAY,CAACC,IAAI,CAAC,CAACC,MAAM;IACtFZ,cAAc,CAACwB,cAAc,CAAC;;IAE9B;IACAC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,oBAAoB,EAAE;MACzDC,MAAM,EAAE;QAAE7B,WAAW,EAAEyB;MAAe;IACxC,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAAC3B,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAMoB,eAAe,GAAIY,IAAI,IAAK;IAChC,MAAMC,eAAe,GAAG;MACtBC,EAAE,EAAE,UAAUF,IAAI,CAACG,QAAQ,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAC3CC,IAAI,EAAE,YAAY;MAClBC,KAAK,EAAE,YAAY;MACnBC,OAAO,EAAE,eAAeR,IAAI,CAACS,YAAY,eAAeT,IAAI,CAACU,UAAU,EAAE;MACzEP,QAAQ,EAAEH,IAAI,CAACG,QAAQ;MACvBQ,SAAS,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC,CAAC;MACnC9B,IAAI,EAAE;IACR,CAAC;IAED+B,eAAe,CAACZ,eAAe,CAAC;IAChCa,qBAAqB,CAAC,CAAC;EACzB,CAAC;;EAED;EACA,MAAMzB,oBAAoB,GAAIW,IAAI,IAAK;IACrC,MAAMC,eAAe,GAAG;MACtBC,EAAE,EAAE,YAAYF,IAAI,CAACG,QAAQ,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAC7CC,IAAI,EAAE,iBAAiB;MACvBC,KAAK,EAAE,iBAAiB;MACxBC,OAAO,EAAE,WAAWR,IAAI,CAACS,YAAY,gBAAgBT,IAAI,CAACe,cAAc,EAAE;MAC1EZ,QAAQ,EAAEH,IAAI,CAACG,QAAQ;MACvBQ,SAAS,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC,CAAC;MACnC9B,IAAI,EAAE;IACR,CAAC;IAED+B,eAAe,CAACZ,eAAe,CAAC;IAChCa,qBAAqB,CAAC,CAAC;EACzB,CAAC;;EAED;EACA,MAAMxB,oBAAoB,GAAIU,IAAI,IAAK;IACrC,MAAMC,eAAe,GAAG;MACtBC,EAAE,EAAE,YAAYF,IAAI,CAACG,QAAQ,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAC7CC,IAAI,EAAE,iBAAiB;MACvBC,KAAK,EAAE,iBAAiB;MACxBC,OAAO,EAAE,oCAAoCR,IAAI,CAACe,cAAc,EAAE;MAClEZ,QAAQ,EAAEH,IAAI,CAACG,QAAQ;MACvBQ,SAAS,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC,CAAC;MACnC9B,IAAI,EAAE;IACR,CAAC;IAED+B,eAAe,CAACZ,eAAe,CAAC;IAChCa,qBAAqB,CAAC,CAAC;EACzB,CAAC;;EAED;EACA,MAAMvB,gBAAgB,GAAIS,IAAI,IAAK;IACjC,MAAMC,eAAe,GAAG;MACtBC,EAAE,EAAE,WAAWF,IAAI,CAACgB,SAAS,IAAIZ,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAC7CC,IAAI,EAAE,aAAa;MACnBC,KAAK,EAAE,aAAa;MACpBC,OAAO,EAAE,oBAAoBR,IAAI,CAACiB,UAAU,eAAejB,IAAI,CAACS,YAAY,EAAE;MAC9EN,QAAQ,EAAEH,IAAI,CAACG,QAAQ;MACvBQ,SAAS,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC,CAAC;MACnC9B,IAAI,EAAE;IACR,CAAC;IAED+B,eAAe,CAACZ,eAAe,CAAC;IAChCa,qBAAqB,CAAC,CAAC;EACzB,CAAC;;EAED;EACA,MAAMtB,qBAAqB,GAAIQ,IAAI,IAAK;IACtC;IACA,IAAIA,IAAI,CAACkB,QAAQ,MAAKnD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEoD,MAAM,GAAE;MAClC,MAAMlB,eAAe,GAAG;QACtBC,EAAE,EAAE,WAAWF,IAAI,CAACgB,SAAS,IAAIZ,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QAC7CC,IAAI,EAAE,aAAa;QACnBC,KAAK,EAAE,aAAa;QACpBC,OAAO,EAAE,oBAAoBR,IAAI,CAACiB,UAAU,eAAejB,IAAI,CAACS,YAAY,EAAE;QAC9EN,QAAQ,EAAEH,IAAI,CAACG,QAAQ;QACvBQ,SAAS,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC,CAAC;QACnC9B,IAAI,EAAE;MACR,CAAC;;MAED;MACA,MAAMsC,WAAW,GAAGxB,MAAM,CAACyB,QAAQ,CAACC,QAAQ;MAC5C,MAAMC,UAAU,GAAG,YAAYvB,IAAI,CAACG,QAAQ,EAAE;MAE9C,IAAI,CAACiB,WAAW,CAACI,QAAQ,CAACD,UAAU,CAAC,EAAE;QACrCV,eAAe,CAACZ,eAAe,CAAC;QAChCa,qBAAqB,CAAC,CAAC;MACzB;IACF;EACF,CAAC;;EAED;EACA,MAAMD,eAAe,GAAIhC,YAAY,IAAK;IACxCZ,gBAAgB,CAACwD,IAAI,IAAI;MACvB;MACA,MAAMC,WAAW,GAAGD,IAAI,CAACE,IAAI,CAACC,CAAC,IAC7BA,CAAC,CAACtB,IAAI,KAAKzB,YAAY,CAACyB,IAAI,IAC5BsB,CAAC,CAACzB,QAAQ,KAAKtB,YAAY,CAACsB,QAAQ,IACnC,IAAIC,IAAI,CAACvB,YAAY,CAAC8B,SAAS,CAAC,GAAG,IAAIP,IAAI,CAACwB,CAAC,CAACjB,SAAS,CAAC,GAAI,IAC/D,CAAC;MAED,IAAIe,WAAW,EAAE,OAAOD,IAAI;;MAE5B;MACA,OAAO,CAAC5C,YAAY,EAAE,GAAG4C,IAAI,CAAC,CAACI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMf,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAI;MACF1C,iBAAiB,CAAC0D,WAAW,GAAG,CAAC;MACjC1D,iBAAiB,CAAC2D,IAAI,CAAC,CAAC,CAACC,KAAK,CAAChD,KAAK,IAAI;QACtCC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D;EACF,CAAC;;EAED;EACA,MAAMiD,UAAU,GAAIC,cAAc,IAAK;IACrCjE,gBAAgB,CAACwD,IAAI,IACnBA,IAAI,CAACU,GAAG,CAACtD,YAAY,IACnBA,YAAY,CAACqB,EAAE,KAAKgC,cAAc,GAC9B;MAAE,GAAGrD,YAAY;MAAEC,IAAI,EAAE;IAAK,CAAC,GAC/BD,YACN,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMuD,aAAa,GAAGA,CAAA,KAAM;IAC1BnE,gBAAgB,CAACwD,IAAI,IACnBA,IAAI,CAACU,GAAG,CAACtD,YAAY,KAAK;MAAE,GAAGA,YAAY;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC,CAC5D,CAAC;EACH,CAAC;;EAED;EACA,MAAMuD,kBAAkB,GAAIH,cAAc,IAAK;IAC7CjE,gBAAgB,CAACwD,IAAI,IACnBA,IAAI,CAAC7C,MAAM,CAACC,YAAY,IAAIA,YAAY,CAACqB,EAAE,KAAKgC,cAAc,CAChE,CAAC;EACH,CAAC;;EAED;EACA,MAAMI,qBAAqB,GAAGA,CAAA,KAAM;IAClCrE,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC;;EAED;EACA,MAAMsE,eAAe,GAAI5B,SAAS,IAAK;IACrC,MAAM6B,IAAI,GAAG,IAAIpC,IAAI,CAACO,SAAS,CAAC;IAChC,MAAMN,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;IACtB,MAAMqC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACtC,GAAG,GAAGmC,IAAI,IAAI,IAAI,CAAC;IAErD,IAAIC,aAAa,GAAG,EAAE,EAAE;MACtB,OAAO,UAAU;IACnB,CAAC,MAAM,IAAIA,aAAa,GAAG,IAAI,EAAE;MAC/B,MAAMG,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,EAAE,CAAC;MAC9C,OAAO,GAAGG,OAAO,IAAIA,OAAO,KAAK,CAAC,GAAG,QAAQ,GAAG,SAAS,MAAM;IACjE,CAAC,MAAM,IAAIH,aAAa,GAAG,KAAK,EAAE;MAChC,MAAMI,KAAK,GAAGH,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,IAAI,CAAC;MAC9C,OAAO,GAAGI,KAAK,IAAIA,KAAK,KAAK,CAAC,GAAG,MAAM,GAAG,OAAO,MAAM;IACzD,CAAC,MAAM;MACL,MAAMC,IAAI,GAAGJ,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,KAAK,CAAC;MAC9C,OAAO,GAAGK,IAAI,IAAIA,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,MAAM,MAAM;IACrD;EACF,CAAC;EAED,MAAMC,KAAK,GAAG;IACZ/E,aAAa;IACbE,WAAW;IACX2C,eAAe;IACfoB,UAAU;IACVG,aAAa;IACbC,kBAAkB;IAClBC,qBAAqB;IACrBC;EACF,CAAC;EAED,oBACE/E,OAAA,CAACC,mBAAmB,CAACuF,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAlF,QAAA,EACxCA;EAAQ;IAAAoF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;AAACtF,GAAA,CAlQWF,oBAAoB;EAAA,QACdR,OAAO;AAAA;AAAAiG,EAAA,GADbzF,oBAAoB;AAoQjC,eAAeA,oBAAoB;AAAC,IAAAyF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}