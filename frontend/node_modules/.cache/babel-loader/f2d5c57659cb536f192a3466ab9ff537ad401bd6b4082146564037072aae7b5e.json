{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayda\\\\CascadeProjects\\\\beta-tech-support\\\\frontend\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { getSocket, onSocketEvent, offSocketEvent, joinUserRoom, joinTechnicianRoom } from '../services/socketService';\nimport { API_URL } from '../services/apiConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  // Initialize notifications when user logs in\n  useEffect(() => {\n    if (!user) {\n      setNotifications([]);\n      setUnreadCount(0);\n      return;\n    }\n\n    // Fetch existing notifications\n    const fetchNotifications = async () => {\n      try {\n        const response = await fetch(`${API_URL}/api/users/notifications`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setNotifications(data);\n          setUnreadCount(data.filter(notif => !notif.read).length);\n        }\n      } catch (error) {\n        console.error('Error fetching notifications:', error);\n      }\n    };\n    fetchNotifications();\n\n    // Initialize socket connection\n    const socket = getSocket();\n\n    // Join user's personal room for notifications\n    if (user.userId) {\n      joinUserRoom(user.userId);\n    }\n\n    // If user is a technician, join the technician room\n    if (user.role === 'technician' || user.role === 'admin') {\n      joinTechnicianRoom();\n    }\n\n    // Handle new ticket notifications\n    const handleNewTicket = data => {\n      const newNotification = {\n        id: `ticket_${Date.now()}`,\n        type: 'new_ticket',\n        ticketId: data.ticketId,\n        ticketNumber: data.ticketNumber,\n        message: `New ticket #${data.ticketNumber} created by ${data.client.name}`,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n      setNotifications(prev => [newNotification, ...prev]);\n      setUnreadCount(prev => prev + 1);\n    };\n\n    // Handle ticket update notifications\n    const handleTicketUpdate = data => {\n      const newNotification = {\n        id: `update_${Date.now()}`,\n        type: 'ticket_update',\n        ticketId: data.ticketId,\n        ticketNumber: data.ticketNumber,\n        message: `Ticket #${data.ticketNumber} has been updated: ${data.updateType}`,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n      setNotifications(prev => [newNotification, ...prev]);\n      setUnreadCount(prev => prev + 1);\n    };\n\n    // Handle new message notifications\n    const handleNewMessage = data => {\n      // Only create notification if message is from someone else\n      if (data.sender.id !== user.userId) {\n        const newNotification = {\n          id: `message_${Date.now()}`,\n          type: 'new_message',\n          ticketId: data.ticketId,\n          ticketNumber: data.ticketNumber,\n          message: `New message from ${data.sender.name} on ticket #${data.ticketNumber}`,\n          timestamp: new Date().toISOString(),\n          read: false\n        };\n        setNotifications(prev => [newNotification, ...prev]);\n        setUnreadCount(prev => prev + 1);\n      }\n    };\n\n    // Register event listeners\n    onSocketEvent('new_ticket', handleNewTicket);\n    onSocketEvent('ticket_updated', handleTicketUpdate);\n    onSocketEvent('new_message', handleNewMessage);\n\n    // Cleanup function\n    return () => {\n      offSocketEvent('new_ticket', handleNewTicket);\n      offSocketEvent('ticket_updated', handleTicketUpdate);\n      offSocketEvent('new_message', handleNewMessage);\n    };\n  }, [user]);\n\n  // Mark notification as read\n  const markAsRead = notificationId => {\n    setNotifications(prev => prev.map(notif => notif.id === notificationId ? {\n      ...notif,\n      read: true\n    } : notif));\n    setUnreadCount(prev => Math.max(0, prev - 1));\n  };\n\n  // Mark all notifications as read\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(notif => ({\n      ...notif,\n      read: true\n    })));\n    setUnreadCount(0);\n  };\n\n  // Remove a notification\n  const removeNotification = notificationId => {\n    const notification = notifications.find(n => n.id === notificationId);\n    setNotifications(prev => prev.filter(notif => notif.id !== notificationId));\n    if (notification && !notification.read) {\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      notifications,\n      unreadCount,\n      markAsRead,\n      markAllAsRead,\n      removeNotification\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"CogDlZP32gwSK0s5FeDK512ezBY=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useAuth","getSocket","onSocketEvent","offSocketEvent","joinUserRoom","joinTechnicianRoom","API_URL","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","NotificationProvider","children","_s2","user","notifications","setNotifications","unreadCount","setUnreadCount","fetchNotifications","response","fetch","headers","Authorization","localStorage","getItem","ok","data","json","filter","notif","read","length","error","console","socket","userId","role","handleNewTicket","newNotification","id","Date","now","type","ticketId","ticketNumber","message","client","name","timestamp","toISOString","prev","handleTicketUpdate","updateType","handleNewMessage","sender","markAsRead","notificationId","map","Math","max","markAllAsRead","removeNotification","notification","find","n","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sayda/CascadeProjects/beta-tech-support/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { \n  getSocket, \n  onSocketEvent, \n  offSocketEvent, \n  joinUserRoom,\n  joinTechnicianRoom\n} from '../services/socketService';\nimport { API_URL } from '../services/apiConfig';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => useContext(NotificationContext);\n\nexport const NotificationProvider = ({ children }) => {\n  const { user } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  // Initialize notifications when user logs in\n  useEffect(() => {\n    if (!user) {\n      setNotifications([]);\n      setUnreadCount(0);\n      return;\n    }\n\n    // Fetch existing notifications\n    const fetchNotifications = async () => {\n      try {\n        const response = await fetch(`${API_URL}/api/users/notifications`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          setNotifications(data);\n          setUnreadCount(data.filter(notif => !notif.read).length);\n        }\n      } catch (error) {\n        console.error('Error fetching notifications:', error);\n      }\n    };\n\n    fetchNotifications();\n\n    // Initialize socket connection\n    const socket = getSocket();\n\n    // Join user's personal room for notifications\n    if (user.userId) {\n      joinUserRoom(user.userId);\n    }\n\n    // If user is a technician, join the technician room\n    if (user.role === 'technician' || user.role === 'admin') {\n      joinTechnicianRoom();\n    }\n\n    // Handle new ticket notifications\n    const handleNewTicket = (data) => {\n      const newNotification = {\n        id: `ticket_${Date.now()}`,\n        type: 'new_ticket',\n        ticketId: data.ticketId,\n        ticketNumber: data.ticketNumber,\n        message: `New ticket #${data.ticketNumber} created by ${data.client.name}`,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n\n      setNotifications(prev => [newNotification, ...prev]);\n      setUnreadCount(prev => prev + 1);\n    };\n\n    // Handle ticket update notifications\n    const handleTicketUpdate = (data) => {\n      const newNotification = {\n        id: `update_${Date.now()}`,\n        type: 'ticket_update',\n        ticketId: data.ticketId,\n        ticketNumber: data.ticketNumber,\n        message: `Ticket #${data.ticketNumber} has been updated: ${data.updateType}`,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n\n      setNotifications(prev => [newNotification, ...prev]);\n      setUnreadCount(prev => prev + 1);\n    };\n\n    // Handle new message notifications\n    const handleNewMessage = (data) => {\n      // Only create notification if message is from someone else\n      if (data.sender.id !== user.userId) {\n        const newNotification = {\n          id: `message_${Date.now()}`,\n          type: 'new_message',\n          ticketId: data.ticketId,\n          ticketNumber: data.ticketNumber,\n          message: `New message from ${data.sender.name} on ticket #${data.ticketNumber}`,\n          timestamp: new Date().toISOString(),\n          read: false\n        };\n\n        setNotifications(prev => [newNotification, ...prev]);\n        setUnreadCount(prev => prev + 1);\n      }\n    };\n\n    // Register event listeners\n    onSocketEvent('new_ticket', handleNewTicket);\n    onSocketEvent('ticket_updated', handleTicketUpdate);\n    onSocketEvent('new_message', handleNewMessage);\n\n    // Cleanup function\n    return () => {\n      offSocketEvent('new_ticket', handleNewTicket);\n      offSocketEvent('ticket_updated', handleTicketUpdate);\n      offSocketEvent('new_message', handleNewMessage);\n    };\n  }, [user]);\n\n  // Mark notification as read\n  const markAsRead = (notificationId) => {\n    setNotifications(prev => \n      prev.map(notif => \n        notif.id === notificationId ? { ...notif, read: true } : notif\n      )\n    );\n    setUnreadCount(prev => Math.max(0, prev - 1));\n  };\n\n  // Mark all notifications as read\n  const markAllAsRead = () => {\n    setNotifications(prev => \n      prev.map(notif => ({ ...notif, read: true }))\n    );\n    setUnreadCount(0);\n  };\n\n  // Remove a notification\n  const removeNotification = (notificationId) => {\n    const notification = notifications.find(n => n.id === notificationId);\n    setNotifications(prev => prev.filter(notif => notif.id !== notificationId));\n    if (notification && !notification.read) {\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    }\n  };\n\n  return (\n    <NotificationContext.Provider\n      value={{\n        notifications,\n        unreadCount,\n        markAsRead,\n        markAllAsRead,\n        removeNotification\n      }}\n    >\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport default NotificationProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}