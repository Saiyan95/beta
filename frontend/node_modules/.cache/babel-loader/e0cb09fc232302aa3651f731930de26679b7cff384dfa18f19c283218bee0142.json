{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayda\\\\CascadeProjects\\\\beta-tech-support\\\\frontend\\\\src\\\\components\\\\notifications\\\\NotificationBadge.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Badge, IconButton, Tooltip } from '@mui/material';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { onSocketEvent, offSocketEvent } from '../../services/socketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationBadge = ({\n  onClick,\n  size = 'medium'\n}) => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [notificationSound] = useState(new Audio('/notification.mp3'));\n  useEffect(() => {\n    // Load unread count from localStorage on component mount\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsedNotifications = JSON.parse(savedNotifications);\n      setUnreadCount(parsedNotifications.filter(notification => !notification.read).length);\n    }\n\n    // Listen for notification count updates\n    window.addEventListener('notificationUpdate', handleNotificationUpdate);\n\n    // Setup socket event listeners based on user role\n    if (user) {\n      // New ticket notification (for technicians and admins)\n      if (user.role === 'technician' || user.role === 'admin') {\n        onSocketEvent('new_ticket', handleNewNotification);\n        onSocketEvent('ticket_assigned', handleNewNotification);\n      }\n\n      // Ticket accepted notification (for clients)\n      if (user.role === 'client') {\n        onSocketEvent('ticket_accepted', handleNewNotification);\n      }\n\n      // New message notification (for all users)\n      onSocketEvent('new_message_notification', handleNewNotification);\n      onSocketEvent('message_received', handleNewNotification);\n    }\n\n    // Cleanup event listeners on component unmount\n    return () => {\n      window.removeEventListener('notificationUpdate', handleNotificationUpdate);\n      if (user) {\n        if (user.role === 'technician' || user.role === 'admin') {\n          offSocketEvent('new_ticket', handleNewNotification);\n          offSocketEvent('ticket_assigned', handleNewNotification);\n        }\n        if (user.role === 'client') {\n          offSocketEvent('ticket_accepted', handleNewNotification);\n        }\n        offSocketEvent('new_message_notification', handleNewNotification);\n        offSocketEvent('message_received', handleNewNotification);\n      }\n    };\n  }, [user]);\n\n  // Handle notification update event\n  const handleNotificationUpdate = event => {\n    if (event.detail && typeof event.detail.unreadCount === 'number') {\n      setUnreadCount(event.detail.unreadCount);\n    } else {\n      // If no count provided, recalculate from localStorage\n      const savedNotifications = localStorage.getItem('notifications');\n      if (savedNotifications) {\n        const parsedNotifications = JSON.parse(savedNotifications);\n        setUnreadCount(parsedNotifications.filter(notification => !notification.read).length);\n      }\n    }\n  };\n\n  // Generic handler for any new notification\n  const handleNewNotification = () => {\n    setUnreadCount(prev => prev + 1);\n    playNotificationSound();\n  };\n\n  // Play notification sound\n  const playNotificationSound = () => {\n    try {\n      notificationSound.currentTime = 0;\n      notificationSound.play().catch(error => {\n        console.error('Error playing notification sound:', error);\n      });\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Tooltip, {\n    title: unreadCount > 0 ? `${unreadCount} unread notifications` : 'No new notifications',\n    children: /*#__PURE__*/_jsxDEV(IconButton, {\n      size: size,\n      color: \"inherit\",\n      onClick: onClick,\n      \"aria-label\": \"show notifications\",\n      \"aria-controls\": \"notifications-menu\",\n      \"aria-haspopup\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(Badge, {\n        badgeContent: unreadCount,\n        color: \"error\",\n        children: /*#__PURE__*/_jsxDEV(NotificationsIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationBadge, \"G2jrVleU19ypDesan9p0Bs39R9Q=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationBadge;\nexport default NotificationBadge;\nvar _c;\n$RefreshReg$(_c, \"NotificationBadge\");","map":{"version":3,"names":["React","useState","useEffect","Badge","IconButton","Tooltip","NotificationsIcon","useAuth","onSocketEvent","offSocketEvent","jsxDEV","_jsxDEV","NotificationBadge","onClick","size","_s","user","unreadCount","setUnreadCount","notificationSound","Audio","savedNotifications","localStorage","getItem","parsedNotifications","JSON","parse","filter","notification","read","length","window","addEventListener","handleNotificationUpdate","role","handleNewNotification","removeEventListener","event","detail","prev","playNotificationSound","currentTime","play","catch","error","console","title","children","color","badgeContent","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sayda/CascadeProjects/beta-tech-support/frontend/src/components/notifications/NotificationBadge.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Badge, IconButton, Tooltip } from '@mui/material';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { onSocketEvent, offSocketEvent } from '../../services/socketService';\n\nconst NotificationBadge = ({ onClick, size = 'medium' }) => {\n  const { user } = useAuth();\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [notificationSound] = useState(new Audio('/notification.mp3'));\n\n  useEffect(() => {\n    // Load unread count from localStorage on component mount\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsedNotifications = JSON.parse(savedNotifications);\n      setUnreadCount(parsedNotifications.filter(notification => !notification.read).length);\n    }\n\n    // Listen for notification count updates\n    window.addEventListener('notificationUpdate', handleNotificationUpdate);\n\n    // Setup socket event listeners based on user role\n    if (user) {\n      // New ticket notification (for technicians and admins)\n      if (user.role === 'technician' || user.role === 'admin') {\n        onSocketEvent('new_ticket', handleNewNotification);\n        onSocketEvent('ticket_assigned', handleNewNotification);\n      }\n\n      // Ticket accepted notification (for clients)\n      if (user.role === 'client') {\n        onSocketEvent('ticket_accepted', handleNewNotification);\n      }\n\n      // New message notification (for all users)\n      onSocketEvent('new_message_notification', handleNewNotification);\n      onSocketEvent('message_received', handleNewNotification);\n    }\n\n    // Cleanup event listeners on component unmount\n    return () => {\n      window.removeEventListener('notificationUpdate', handleNotificationUpdate);\n      \n      if (user) {\n        if (user.role === 'technician' || user.role === 'admin') {\n          offSocketEvent('new_ticket', handleNewNotification);\n          offSocketEvent('ticket_assigned', handleNewNotification);\n        }\n\n        if (user.role === 'client') {\n          offSocketEvent('ticket_accepted', handleNewNotification);\n        }\n\n        offSocketEvent('new_message_notification', handleNewNotification);\n        offSocketEvent('message_received', handleNewNotification);\n      }\n    };\n  }, [user]);\n\n  // Handle notification update event\n  const handleNotificationUpdate = (event) => {\n    if (event.detail && typeof event.detail.unreadCount === 'number') {\n      setUnreadCount(event.detail.unreadCount);\n    } else {\n      // If no count provided, recalculate from localStorage\n      const savedNotifications = localStorage.getItem('notifications');\n      if (savedNotifications) {\n        const parsedNotifications = JSON.parse(savedNotifications);\n        setUnreadCount(parsedNotifications.filter(notification => !notification.read).length);\n      }\n    }\n  };\n\n  // Generic handler for any new notification\n  const handleNewNotification = () => {\n    setUnreadCount(prev => prev + 1);\n    playNotificationSound();\n  };\n\n  // Play notification sound\n  const playNotificationSound = () => {\n    try {\n      notificationSound.currentTime = 0;\n      notificationSound.play().catch(error => {\n        console.error('Error playing notification sound:', error);\n      });\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  };\n\n  return (\n    <Tooltip title={unreadCount > 0 ? `${unreadCount} unread notifications` : 'No new notifications'}>\n      <IconButton\n        size={size}\n        color=\"inherit\"\n        onClick={onClick}\n        aria-label=\"show notifications\"\n        aria-controls=\"notifications-menu\"\n        aria-haspopup=\"true\"\n      >\n        <Badge badgeContent={unreadCount} color=\"error\">\n          <NotificationsIcon />\n        </Badge>\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport default NotificationBadge;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}