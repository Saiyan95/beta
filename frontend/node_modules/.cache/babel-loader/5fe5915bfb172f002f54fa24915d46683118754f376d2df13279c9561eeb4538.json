{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayda\\\\CascadeProjects\\\\beta-tech-support\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { getSocket, closeSocket } from '../services/socketService';\nimport { API_URL } from '../services/apiConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on page load\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      const parsedUser = JSON.parse(userData);\n      setUser(parsedUser);\n      // Set default authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Initialize socket connection with auth token\n      initializeSocket(token);\n    }\n    setLoading(false);\n  }, []);\n\n  // Initialize socket with authentication token\n  const initializeSocket = token => {\n    try {\n      const socket = getSocket();\n      // Set auth token for socket connection\n      socket.auth = {\n        token\n      };\n      // Connect if not already connected\n      if (socket.disconnected) {\n        socket.connect();\n      }\n    } catch (error) {\n      console.error('Socket initialization error:', error);\n    }\n  };\n  const register = async userData => {\n    try {\n      console.log('Registering user with API_URL:', API_URL);\n\n      // Determine the endpoint based on user role\n      const endpoint = userData.role === 'technician' ? `${API_URL}/auth/technician/signup` : `${API_URL}/auth/client/signup`;\n      const response = await axios.post(endpoint, userData);\n\n      // Store token and user data\n      const {\n        token,\n        user: newUser\n      } = response.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(newUser));\n\n      // Set default authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Initialize socket connection\n      initializeSocket(token);\n      setUser(newUser);\n      return newUser;\n    } catch (error) {\n      console.error('Registration error:', error.response || error);\n      throw error;\n    }\n  };\n  const login = async (email, password, userType = 'client') => {\n    try {\n      // Log login attempt (not credentials)\n      console.log(`Attempting login for ${email} as ${userType}`);\n\n      // Determine the endpoint based on user type\n      const endpoint = userType === 'technician' ? `${API_URL}/auth/technician/login` : `${API_URL}/auth/client/login`;\n\n      // Add additional logging to debug network issues\n      console.log(`Sending request to: ${endpoint}`);\n\n      // Use axios interceptor to log request details (only for debugging)\n      const requestInterceptor = axios.interceptors.request.use(request => {\n        console.log('Request details:', {\n          url: request.url,\n          method: request.method,\n          headers: request.headers\n        });\n        return request;\n      });\n      const response = await axios.post(endpoint, {\n        email,\n        password // Password is sent as-is, no manual escaping needed\n      }, {\n        // Add timeout and additional headers for better error handling\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n\n      // Remove request interceptor after use\n      axios.interceptors.request.eject(requestInterceptor);\n\n      // Store token and user data\n      const {\n        token,\n        user: loggedInUser\n      } = response.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(loggedInUser));\n\n      // Set default authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Initialize socket connection\n      initializeSocket(token);\n      setUser(loggedInUser);\n      return loggedInUser;\n    } catch (error) {\n      // Enhanced error logging for better debugging\n      console.error('Login error:', error);\n      if (error.response) {\n        // The server responded with a status code outside the 2xx range\n        console.error('Response error data:', error.response.data);\n        console.error('Response error status:', error.response.status);\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response received:', error.request);\n      }\n      throw error;\n    }\n  };\n  const logout = () => {\n    // Remove token and user data from storage\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // Remove authorization header\n    delete axios.defaults.headers.common['Authorization'];\n\n    // Close socket connection\n    closeSocket();\n    setUser(null);\n  };\n  const checkEmailExists = async email => {\n    try {\n      const response = await axios.get(`${API_URL}/api/auth/check-email?email=${email}`);\n      return response.data.exists;\n    } catch (error) {\n      console.error('Email check error:', error.response || error);\n      throw error;\n    }\n  };\n  const getAuthToken = () => {\n    return localStorage.getItem('token');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      register,\n      login,\n      logout,\n      checkEmailExists,\n      getAuthToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","getSocket","closeSocket","API_URL","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","userData","parsedUser","JSON","parse","defaults","headers","common","initializeSocket","socket","auth","disconnected","connect","error","console","register","log","endpoint","role","response","post","newUser","data","setItem","stringify","login","email","password","userType","requestInterceptor","interceptors","request","use","url","method","timeout","eject","loggedInUser","status","logout","removeItem","checkEmailExists","get","exists","getAuthToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sayda/CascadeProjects/beta-tech-support/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { getSocket, closeSocket } from '../services/socketService';\nimport { API_URL } from '../services/apiConfig';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is logged in on page load\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    \n    if (token && userData) {\n      const parsedUser = JSON.parse(userData);\n      setUser(parsedUser);\n      // Set default authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      // Initialize socket connection with auth token\n      initializeSocket(token);\n    }\n    \n    setLoading(false);\n  }, []);\n\n  // Initialize socket with authentication token\n  const initializeSocket = (token) => {\n    try {\n      const socket = getSocket();\n      // Set auth token for socket connection\n      socket.auth = { token };\n      // Connect if not already connected\n      if (socket.disconnected) {\n        socket.connect();\n      }\n    } catch (error) {\n      console.error('Socket initialization error:', error);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      console.log('Registering user with API_URL:', API_URL);\n      \n      // Determine the endpoint based on user role\n      const endpoint = userData.role === 'technician' \n        ? `${API_URL}/auth/technician/signup`\n        : `${API_URL}/auth/client/signup`;\n      \n      const response = await axios.post(endpoint, userData);\n      \n      // Store token and user data\n      const { token, user: newUser } = response.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(newUser));\n      \n      // Set default authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      // Initialize socket connection\n      initializeSocket(token);\n      \n      setUser(newUser);\n      return newUser;\n    } catch (error) {\n      console.error('Registration error:', error.response || error);\n      throw error;\n    }\n  };\n\n  const login = async (email, password, userType = 'client') => {\n    try {\n      // Log login attempt (not credentials)\n      console.log(`Attempting login for ${email} as ${userType}`);\n      \n      // Determine the endpoint based on user type\n      const endpoint = userType === 'technician'\n        ? `${API_URL}/auth/technician/login`\n        : `${API_URL}/auth/client/login`;\n      \n      // Add additional logging to debug network issues\n      console.log(`Sending request to: ${endpoint}`);\n      \n      // Use axios interceptor to log request details (only for debugging)\n      const requestInterceptor = axios.interceptors.request.use(request => {\n        console.log('Request details:', {\n          url: request.url,\n          method: request.method,\n          headers: request.headers\n        });\n        return request;\n      });\n      \n      const response = await axios.post(endpoint, {\n        email,\n        password // Password is sent as-is, no manual escaping needed\n      }, {\n        // Add timeout and additional headers for better error handling\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      \n      // Remove request interceptor after use\n      axios.interceptors.request.eject(requestInterceptor);\n      \n      // Store token and user data\n      const { token, user: loggedInUser } = response.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(loggedInUser));\n      \n      // Set default authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      // Initialize socket connection\n      initializeSocket(token);\n      \n      setUser(loggedInUser);\n      return loggedInUser;\n    } catch (error) {\n      // Enhanced error logging for better debugging\n      console.error('Login error:', error);\n      \n      if (error.response) {\n        // The server responded with a status code outside the 2xx range\n        console.error('Response error data:', error.response.data);\n        console.error('Response error status:', error.response.status);\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response received:', error.request);\n      }\n      \n      throw error;\n    }\n  };\n\n  const logout = () => {\n    // Remove token and user data from storage\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    \n    // Remove authorization header\n    delete axios.defaults.headers.common['Authorization'];\n    \n    // Close socket connection\n    closeSocket();\n    \n    setUser(null);\n  };\n\n  const checkEmailExists = async (email) => {\n    try {\n      const response = await axios.get(`${API_URL}/api/auth/check-email?email=${email}`);\n      return response.data.exists;\n    } catch (error) {\n      console.error('Email check error:', error.response || error);\n      throw error;\n    }\n  };\n\n  const getAuthToken = () => {\n    return localStorage.getItem('token');\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        register,\n        login,\n        logout,\n        checkEmailExists,\n        getAuthToken\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}