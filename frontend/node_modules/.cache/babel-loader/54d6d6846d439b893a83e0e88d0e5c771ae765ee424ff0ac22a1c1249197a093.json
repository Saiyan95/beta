{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayda\\\\CascadeProjects\\\\beta-tech-support\\\\frontend\\\\src\\\\pages\\\\tickets\\\\CreateTicket.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Box, Container, Grid, Paper, Typography, Tab, Tabs, CircularProgress } from '@mui/material';\nimport { useTickets } from '../../contexts/TicketContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport TicketList from '../tickets/TicketList';\nimport axios from 'axios';\nimport { API_URL } from '../../utils/apiConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClientDashboard = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const {\n    tickets,\n    fetchTickets,\n    addTicket\n  } = useTickets();\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState({\n    totalTickets: 0,\n    activeTickets: 0,\n    resolvedTickets: 0\n  });\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [success, setSuccess] = useState(false);\n  const [createdTicketId, setCreatedTicketId] = useState(null);\n  const [createdTicketNumber, setCreatedTicketNumber] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [error, setError] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('Connected');\n  useEffect(() => {\n    var _location$state;\n    // Check if we need to refresh based on navigation state\n    if ((_location$state = location.state) !== null && _location$state !== void 0 && _location$state.refresh) {\n      // Clear the state to prevent infinite refreshes\n      window.history.replaceState({}, document.title);\n      // Refresh the dashboard\n      refreshDashboard();\n    }\n\n    // Fetch tickets using the context\n    fetchTickets().then(() => {\n      fetchStats();\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching tickets:', error);\n      setLoading(false);\n    });\n  }, [fetchTickets, tickets, location.state]); // Add tickets to dependency array\n\n  // Separate function to fetch just the stats\n  const fetchStats = async () => {\n    try {\n      const statsRes = await axios.get(`${API_URL}/tickets/stats`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      console.log(statsRes.data);\n      setStats(statsRes.data);\n\n      // Add this fallback in case the API doesn't return updated stats\n      if (!statsRes.data || Object.keys(statsRes.data).length === 0) {\n        // Calculate stats from tickets array as fallback\n        const activeTickets = tickets.filter(t => t.status !== 'Resolved').length;\n        const resolvedTickets = tickets.filter(t => t.status === 'Resolved').length;\n        setStats({\n          totalTickets: tickets.length,\n          activeTickets: activeTickets,\n          resolvedTickets: resolvedTickets\n        });\n      }\n    } catch (error) {\n      var _error$response;\n      console.error('Error fetching stats:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n\n      // Calculate stats from tickets array as fallback\n      const activeTickets = tickets.filter(t => t.status !== 'Resolved').length;\n      const resolvedTickets = tickets.filter(t => t.status === 'Resolved').length;\n      setStats({\n        totalTickets: tickets.length,\n        activeTickets: activeTickets,\n        resolvedTickets: resolvedTickets\n      });\n    }\n  };\n\n  // Add this function\n  const refreshDashboard = () => {\n    fetchTickets().then(() => {\n      fetchStats();\n    }).catch(error => {\n      console.error('Error refreshing dashboard:', error);\n    });\n  };\n  const handleTabChange = (event, newValue) => {\n    setSelectedTab(newValue);\n  };\n\n  // Filter tickets based on selected tab\n  const getFilteredTickets = () => {\n    if (selectedTab === 0) {\n      return tickets; // All tickets\n    } else if (selectedTab === 1) {\n      return tickets.filter(ticket => ticket.status !== 'Resolved'); // Active tickets\n    } else {\n      return tickets.filter(ticket => ticket.status === 'Resolved'); // Resolved tickets\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate form before submission\n    if (!validateForm()) {\n      setError('Please fix the errors before submitting');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      // Log detailed information for debugging\n      console.log('Form data being submitted:', formData);\n      console.log('API endpoint:', TICKET_ENDPOINTS.CREATE);\n      console.log('API URL:', API_URL);\n      console.log('User info:', user);\n\n      // Properly structure the data for backend processing\n      const submissionData = {\n        category: formData.category,\n        priority: formData.priority,\n        description: formData.description,\n        numberOfUsers: formData.numberOfUsers || 1,\n        product: {\n          name: formData.productName || formData.category || 'Unknown Product',\n          type: formData.productType || '',\n          serialNumber: formData.serialNumber || '',\n          warrantyStatus: {\n            inWarranty: formData.warrantyStatus || false,\n            expiryDate: formData.warrantyStatus && formData.warrantyExpiry ? formData.warrantyExpiry : null\n          }\n        },\n        clientInfo: {\n          firstName: user.firstName,\n          lastName: user.lastName,\n          companyName: user.companyName,\n          username: user.username,\n          department: user.department,\n          phoneNumber: user.phoneNumber\n        }\n      };\n      console.log('Submission data after preprocessing:', submissionData);\n      console.log('Auth token present:', !!localStorage.getItem('token'));\n      const response = await axios.post(TICKET_ENDPOINTS.CREATE, submissionData, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        },\n        timeout: 10000\n      });\n      console.log('Ticket creation response:', response.data);\n      if (response.data.ticket) {\n        setSuccess(true);\n        setCreatedTicketId(response.data.ticket._id);\n        setCreatedTicketNumber(response.data.ticket.ticketNumber);\n\n        // Show success message\n        setSuccessMessage(`Ticket ${response.data.ticket.ticketNumber} created successfully!`);\n\n        // Add the new ticket to our local tickets state\n        console.log('Adding ticket to dashboard state:', response.data.ticket);\n        addTicket(response.data.ticket);\n\n        // Clear form data\n        setFormData({\n          category: '',\n          productType: '',\n          productName: '',\n          serialNumber: '',\n          warrantyStatus: false,\n          warrantyExpiry: '',\n          priority: 'medium',\n          description: '',\n          numberOfUsers: 1\n        });\n\n        // Immediate redirect to client dashboard\n        navigate('/client', {\n          state: {\n            refresh: true\n          }\n        });\n      } else {\n        setError('Unexpected response format from server');\n        console.error('Unexpected response format:', response.data);\n      }\n    } catch (error) {\n      console.error('Error creating ticket:', error);\n      setSuccess(false);\n      if (error.response) {\n        console.error('Response data:', error.response.data);\n        console.error('Response status:', error.response.status);\n        console.error('Response headers:', error.response.headers);\n        setError(error.response.data.message || 'Error creating ticket');\n        setConnectionStatus('Connected, but received an error response');\n      } else if (error.request) {\n        console.error('No response received - Request:', error.request);\n        setError('No response received from server. Please try again later.');\n        setConnectionStatus('Connection failed - no response');\n      } else {\n        console.error('Request setup error:', error.message);\n        setError('Error creating ticket: ' + error.message);\n        setConnectionStatus('Request setup failed');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"80vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      my: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        children: [\"Welcome, \", user === null || user === void 0 ? void 0 : user.firstName, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"textSecondary\",\n        paragraph: true,\n        children: \"This is your support dashboard. Here you can create new support tickets and view the status of your existing tickets.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 2,\n        sx: {\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          value: selectedTab,\n          onChange: handleTabChange,\n          indicatorColor: \"primary\",\n          textColor: \"primary\",\n          variant: \"fullWidth\",\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"All Tickets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Active Tickets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Resolved Tickets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TicketList, {\n        tickets: getFilteredTickets(),\n        showCreateButton: true,\n        emptyMessage: \"No tickets found. Create a new support ticket to get help.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(ClientDashboard, \"EXKEdBtI2BycV49pMaThGyNg5UI=\", false, function () {\n  return [useLocation, useNavigate, useAuth, useTickets];\n});\n_c = ClientDashboard;\nexport default ClientDashboard;\nvar _c;\n$RefreshReg$(_c, \"ClientDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","Box","Container","Grid","Paper","Typography","Tab","Tabs","CircularProgress","useTickets","useAuth","TicketList","axios","API_URL","jsxDEV","_jsxDEV","ClientDashboard","_s","location","navigate","user","tickets","fetchTickets","addTicket","loading","setLoading","stats","setStats","totalTickets","activeTickets","resolvedTickets","selectedTab","setSelectedTab","success","setSuccess","createdTicketId","setCreatedTicketId","createdTicketNumber","setCreatedTicketNumber","successMessage","setSuccessMessage","error","setError","connectionStatus","setConnectionStatus","_location$state","state","refresh","window","history","replaceState","document","title","refreshDashboard","then","fetchStats","catch","console","statsRes","get","headers","Authorization","localStorage","getItem","log","data","Object","keys","length","filter","t","status","_error$response","response","message","handleTabChange","event","newValue","getFilteredTickets","ticket","handleSubmit","e","preventDefault","validateForm","formData","TICKET_ENDPOINTS","CREATE","submissionData","category","priority","description","numberOfUsers","product","name","productName","type","productType","serialNumber","warrantyStatus","inWarranty","expiryDate","warrantyExpiry","clientInfo","firstName","lastName","companyName","username","department","phoneNumber","post","timeout","_id","ticketNumber","setFormData","request","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","my","variant","component","gutterBottom","color","paragraph","elevation","sx","mb","value","onChange","indicatorColor","textColor","label","showCreateButton","emptyMessage","_c","$RefreshReg$"],"sources":["C:/Users/sayda/CascadeProjects/beta-tech-support/frontend/src/pages/tickets/CreateTicket.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Box, Container, Grid, Paper, Typography, Tab, Tabs, CircularProgress } from '@mui/material';\nimport { useTickets } from '../../contexts/TicketContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport TicketList from '../tickets/TicketList';\nimport axios from 'axios';\nimport { API_URL } from '../../utils/apiConfig';\n\nconst ClientDashboard = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const { tickets, fetchTickets, addTicket } = useTickets();\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState({\n    totalTickets: 0,\n    activeTickets: 0,\n    resolvedTickets: 0\n  });\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [success, setSuccess] = useState(false);\n  const [createdTicketId, setCreatedTicketId] = useState(null);\n  const [createdTicketNumber, setCreatedTicketNumber] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [error, setError] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('Connected');\n\n  useEffect(() => {\n    // Check if we need to refresh based on navigation state\n    if (location.state?.refresh) {\n      // Clear the state to prevent infinite refreshes\n      window.history.replaceState({}, document.title);\n      // Refresh the dashboard\n      refreshDashboard();\n    }\n    \n    // Fetch tickets using the context\n    fetchTickets().then(() => {\n      fetchStats();\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching tickets:', error);\n      setLoading(false);\n    });\n  }, [fetchTickets, tickets, location.state]); // Add tickets to dependency array\n\n  // Separate function to fetch just the stats\n  const fetchStats = async () => {\n    try {\n      const statsRes = await axios.get(`${API_URL}/tickets/stats`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      \n      console.log(statsRes.data)\n\n      setStats(statsRes.data);\n      \n      // Add this fallback in case the API doesn't return updated stats\n      if (!statsRes.data || Object.keys(statsRes.data).length === 0) {\n        // Calculate stats from tickets array as fallback\n        const activeTickets = tickets.filter(t => t.status !== 'Resolved').length;\n        const resolvedTickets = tickets.filter(t => t.status === 'Resolved').length;\n        \n        setStats({\n          totalTickets: tickets.length,\n          activeTickets: activeTickets,\n          resolvedTickets: resolvedTickets\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching stats:', error.response?.data || error.message);\n      \n      // Calculate stats from tickets array as fallback\n      const activeTickets = tickets.filter(t => t.status !== 'Resolved').length;\n      const resolvedTickets = tickets.filter(t => t.status === 'Resolved').length;\n      \n      setStats({\n        totalTickets: tickets.length,\n        activeTickets: activeTickets,\n        resolvedTickets: resolvedTickets\n      });\n    }\n  };\n\n  // Add this function\n  const refreshDashboard = () => {\n    fetchTickets().then(() => {\n      fetchStats();\n    }).catch(error => {\n      console.error('Error refreshing dashboard:', error);\n    });\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setSelectedTab(newValue);\n  };\n\n  // Filter tickets based on selected tab\n  const getFilteredTickets = () => {\n    if (selectedTab === 0) {\n      return tickets; // All tickets\n    } else if (selectedTab === 1) {\n      return tickets.filter(ticket => ticket.status !== 'Resolved'); // Active tickets\n    } else {\n      return tickets.filter(ticket => ticket.status === 'Resolved'); // Resolved tickets\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Validate form before submission\n    if (!validateForm()) {\n      setError('Please fix the errors before submitting');\n      return;\n    }\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Log detailed information for debugging\n      console.log('Form data being submitted:', formData);\n      console.log('API endpoint:', TICKET_ENDPOINTS.CREATE);\n      console.log('API URL:', API_URL);\n      console.log('User info:', user);\n      \n      // Properly structure the data for backend processing\n      const submissionData = {\n        category: formData.category,\n        priority: formData.priority,\n        description: formData.description,\n        numberOfUsers: formData.numberOfUsers || 1,\n        product: {\n          name: formData.productName || formData.category || 'Unknown Product',\n          type: formData.productType || '',\n          serialNumber: formData.serialNumber || '',\n          warrantyStatus: {\n            inWarranty: formData.warrantyStatus || false,\n            expiryDate: formData.warrantyStatus && formData.warrantyExpiry ? formData.warrantyExpiry : null\n          }\n        },\n        clientInfo: {\n          firstName: user.firstName,\n          lastName: user.lastName,\n          companyName: user.companyName,\n          username: user.username,\n          department: user.department,\n          phoneNumber: user.phoneNumber\n        }\n      };\n      \n      console.log('Submission data after preprocessing:', submissionData);\n      console.log('Auth token present:', !!localStorage.getItem('token'));\n      \n      const response = await axios.post(\n        TICKET_ENDPOINTS.CREATE,\n        submissionData,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n            'Content-Type': 'application/json'\n          },\n          timeout: 10000\n        }\n      );\n      \n      console.log('Ticket creation response:', response.data);\n      \n      if (response.data.ticket) {\n        setSuccess(true);\n        setCreatedTicketId(response.data.ticket._id);\n        setCreatedTicketNumber(response.data.ticket.ticketNumber);\n        \n        // Show success message\n        setSuccessMessage(`Ticket ${response.data.ticket.ticketNumber} created successfully!`);\n        \n        // Add the new ticket to our local tickets state\n        console.log('Adding ticket to dashboard state:', response.data.ticket);\n        addTicket(response.data.ticket);\n        \n        // Clear form data\n        setFormData({\n          category: '',\n          productType: '',\n          productName: '',\n          serialNumber: '',\n          warrantyStatus: false,\n          warrantyExpiry: '',\n          priority: 'medium',\n          description: '',\n          numberOfUsers: 1\n        });\n        \n        // Immediate redirect to client dashboard\n        navigate('/client', { state: { refresh: true } });\n      } else {\n        setError('Unexpected response format from server');\n        console.error('Unexpected response format:', response.data);\n      }\n    } catch (error) {\n      console.error('Error creating ticket:', error);\n      setSuccess(false);\n      \n      if (error.response) {\n        console.error('Response data:', error.response.data);\n        console.error('Response status:', error.response.status);\n        console.error('Response headers:', error.response.headers);\n        \n        setError(error.response.data.message || 'Error creating ticket');\n        setConnectionStatus('Connected, but received an error response');\n      } else if (error.request) {\n        console.error('No response received - Request:', error.request);\n        setError('No response received from server. Please try again later.');\n        setConnectionStatus('Connection failed - no response');\n      } else {\n        console.error('Request setup error:', error.message);\n        setError('Error creating ticket: ' + error.message);\n        setConnectionStatus('Request setup failed');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box my={4}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Welcome, {user?.firstName}!\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\" paragraph>\n          This is your support dashboard. Here you can create new support tickets and view the status of your existing tickets.\n        </Typography>\n\n\n        <Paper elevation={2} sx={{ mb: 3 }}>\n          <Tabs \n            value={selectedTab} \n            onChange={handleTabChange} \n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n          >\n            <Tab label=\"All Tickets\" />\n            <Tab label=\"Active Tickets\" />\n            <Tab label=\"Resolved Tickets\" />\n          </Tabs>\n        </Paper>\n\n        <TicketList \n          tickets={getFilteredTickets()} \n          showCreateButton={true} \n          emptyMessage=\"No tickets found. Create a new support ticket to get help.\"\n        />\n      </Box>\n    </Container>\n  );\n};\n\nexport default ClientDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}