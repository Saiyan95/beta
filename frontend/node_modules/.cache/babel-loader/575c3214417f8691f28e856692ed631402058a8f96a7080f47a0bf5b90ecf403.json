{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayda\\\\CascadeProjects\\\\beta-tech-support\\\\frontend\\\\src\\\\components\\\\notifications\\\\TicketNotification.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { onSocketEvent, offSocketEvent } from '../../services/socketService';\nimport { Badge, Box, Button, Divider, IconButton, List, ListItem, ListItemText, Menu, MenuItem, Popover, Typography, Tooltip, Zoom } from '@mui/material';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport CloseIcon from '@mui/icons-material/Close';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport MarkChatReadIcon from '@mui/icons-material/MarkChatRead';\nimport MarkChatUnreadIcon from '@mui/icons-material/MarkChatUnread';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TicketNotification = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const navigate = useNavigate();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [notificationSound] = useState(new Audio('/notification.mp3'));\n  useEffect(() => {\n    // Load notifications from localStorage on component mount\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsedNotifications = JSON.parse(savedNotifications);\n      setNotifications(parsedNotifications);\n      setUnreadCount(parsedNotifications.filter(notification => !notification.read).length);\n    }\n\n    // Setup socket event listeners based on user role\n    if (user) {\n      // New ticket notification (for technicians and admins)\n      if (user.role === 'technician' || user.role === 'admin') {\n        onSocketEvent('new_ticket', handleNewTicket);\n        onSocketEvent('ticket_assigned', handleTicketAssigned);\n      }\n\n      // Ticket accepted notification (for clients)\n      if (user.role === 'client') {\n        onSocketEvent('ticket_accepted', handleTicketAccepted);\n      }\n\n      // New message notification (for all users)\n      onSocketEvent('new_message_notification', handleNewMessage);\n      onSocketEvent('message_received', handleMessageReceived);\n    }\n\n    // Cleanup event listeners on component unmount\n    return () => {\n      if (user) {\n        if (user.role === 'technician' || user.role === 'admin') {\n          offSocketEvent('new_ticket', handleNewTicket);\n          offSocketEvent('ticket_assigned', handleTicketAssigned);\n        }\n        if (user.role === 'client') {\n          offSocketEvent('ticket_accepted', handleTicketAccepted);\n        }\n        offSocketEvent('new_message_notification', handleNewMessage);\n        offSocketEvent('message_received', handleMessageReceived);\n      }\n    };\n  }, [user]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    if (notifications.length > 0) {\n      localStorage.setItem('notifications', JSON.stringify(notifications));\n      setUnreadCount(notifications.filter(notification => !notification.read).length);\n    }\n  }, [notifications]);\n\n  // Handler for new ticket notifications\n  const handleNewTicket = data => {\n    const newNotification = {\n      id: `ticket_${data.ticketId}_${Date.now()}`,\n      type: 'new_ticket',\n      title: 'New Ticket',\n      message: `New ticket #${data.ticketNumber} created by ${data.clientName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for ticket assignment notifications\n  const handleTicketAssigned = data => {\n    const newNotification = {\n      id: `assigned_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_assigned',\n      title: 'Ticket Assigned',\n      message: `Ticket #${data.ticketNumber} assigned to ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for ticket acceptance notifications\n  const handleTicketAccepted = data => {\n    const newNotification = {\n      id: `accepted_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_accepted',\n      title: 'Ticket Accepted',\n      message: `Your ticket has been accepted by ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for new message notifications\n  const handleNewMessage = data => {\n    const newNotification = {\n      id: `message_${data.messageId}_${Date.now()}`,\n      type: 'new_message',\n      title: 'New Message',\n      message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for message received in current ticket view\n  const handleMessageReceived = data => {\n    // Only create notification if the message is not from the current user\n    if (data.senderId !== user.userId) {\n      const newNotification = {\n        id: `message_${data.messageId}_${Date.now()}`,\n        type: 'new_message',\n        title: 'New Message',\n        message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n        ticketId: data.ticketId,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n\n      // Check if we're not already on this ticket's page\n      const currentPath = window.location.pathname;\n      const ticketPath = `/tickets/${data.ticketId}`;\n      if (!currentPath.includes(ticketPath)) {\n        addNotification(newNotification);\n        playNotificationSound();\n      }\n    }\n  };\n\n  // Add a new notification to the list\n  const addNotification = notification => {\n    setNotifications(prev => {\n      // Limit to 20 notifications\n      const updated = [notification, ...prev].slice(0, 20);\n      return updated;\n    });\n  };\n\n  // Play notification sound\n  const playNotificationSound = () => {\n    try {\n      notificationSound.currentTime = 0;\n      notificationSound.play().catch(error => {\n        console.error('Error playing notification sound:', error);\n      });\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  };\n\n  // Handle click on notification icon\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  // Handle close of notification menu\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  // Handle click on a notification\n  const handleNotificationClick = notification => {\n    // Mark notification as read\n    markAsRead(notification.id);\n\n    // Navigate to the ticket\n    navigate(`/tickets/${notification.ticketId}`);\n\n    // Close the notification menu\n    handleClose();\n  };\n\n  // Mark a notification as read\n  const markAsRead = notificationId => {\n    setNotifications(prev => prev.map(notification => notification.id === notificationId ? {\n      ...notification,\n      read: true\n    } : notification));\n  };\n\n  // Mark all notifications as read\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(notification => ({\n      ...notification,\n      read: true\n    })));\n  };\n\n  // Remove a notification\n  const removeNotification = notificationId => {\n    setNotifications(prev => prev.filter(notification => notification.id !== notificationId));\n  };\n\n  // Clear all notifications\n  const clearAllNotifications = () => {\n    setNotifications([]);\n    localStorage.removeItem('notifications');\n    handleClose();\n  };\n\n  // Format timestamp to relative time\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInSeconds = Math.floor((now - date) / 1000);\n    if (diffInSeconds < 60) {\n      return 'Just now';\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60);\n      return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;\n    } else if (diffInSeconds < 86400) {\n      const hours = Math.floor(diffInSeconds / 3600);\n      return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;\n    } else {\n      const days = Math.floor(diffInSeconds / 86400);\n      return `${days} ${days === 1 ? 'day' : 'days'} ago`;\n    }\n  };\n\n  // Get icon for notification type\n  const getNotificationIcon = type => {\n    switch (type) {\n      case 'new_ticket':\n        return /*#__PURE__*/_jsxDEV(Badge, {\n          color: \"error\",\n          variant: \"dot\",\n          children: /*#__PURE__*/_jsxDEV(AccessTimeIcon, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 51\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 16\n        }, this);\n      case 'ticket_assigned':\n      case 'ticket_accepted':\n        return /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n          color: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 16\n        }, this);\n      case 'new_message':\n        return /*#__PURE__*/_jsxDEV(MarkChatUnreadIcon, {\n          color: \"info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(NotificationsIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const open = Boolean(anchorEl);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n      title: unreadCount > 0 ? `${unreadCount} unread notifications` : 'No new notifications',\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        size: \"large\",\n        color: \"inherit\",\n        onClick: handleClick,\n        \"aria-label\": \"show notifications\",\n        \"aria-controls\": \"notifications-menu\",\n        \"aria-haspopup\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(Badge, {\n          badgeContent: unreadCount,\n          color: \"error\",\n          children: /*#__PURE__*/_jsxDEV(NotificationsIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Popover, {\n      id: \"notifications-menu\",\n      anchorEl: anchorEl,\n      open: open,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      PaperProps: {\n        style: {\n          maxHeight: '400px',\n          width: '350px'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 1,\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          bgcolor: 'primary.main',\n          color: 'white'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          fontWeight: \"bold\",\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [unreadCount > 0 && /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Mark all as read\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              color: \"inherit\",\n              onClick: markAllAsRead,\n              children: /*#__PURE__*/_jsxDEV(MarkChatReadIcon, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), notifications.length > 0 && /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Clear all notifications\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              color: \"inherit\",\n              onClick: clearAllNotifications,\n              children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), notifications.length === 0 ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 2,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: \"No notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(List, {\n        sx: {\n          p: 0\n        },\n        children: notifications.map(notification => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            alignItems: \"flex-start\",\n            sx: {\n              bgcolor: notification.read ? 'transparent' : 'action.hover',\n              '&:hover': {\n                bgcolor: 'action.selected'\n              },\n              cursor: 'pointer',\n              py: 1\n            },\n            secondaryAction: /*#__PURE__*/_jsxDEV(IconButton, {\n              edge: \"end\",\n              \"aria-label\": \"delete\",\n              size: \"small\",\n              onClick: e => {\n                e.stopPropagation();\n                removeNotification(notification.id);\n              },\n              children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 21\n            }, this),\n            onClick: () => handleNotificationClick(notification),\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mr: 2,\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: getNotificationIcon(notification.type)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                component: \"div\",\n                children: notification.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 23\n              }, this),\n              secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.primary\",\n                  component: \"span\",\n                  children: notification.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  color: \"text.secondary\",\n                  component: \"div\",\n                  children: formatTimestamp(notification.timestamp)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            component: \"li\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 17\n          }, this)]\n        }, notification.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(TicketNotification, \"z/pbXZT4Cmd2jOXboi2Q9EElTJo=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = TicketNotification;\nexport default TicketNotification;\nvar _c;\n$RefreshReg$(_c, \"TicketNotification\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useAuth","onSocketEvent","offSocketEvent","Badge","Box","Button","Divider","IconButton","List","ListItem","ListItemText","Menu","MenuItem","Popover","Typography","Tooltip","Zoom","NotificationsIcon","CloseIcon","CheckCircleIcon","MarkChatReadIcon","MarkChatUnreadIcon","AccessTimeIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","TicketNotification","_s","user","navigate","notifications","setNotifications","unreadCount","setUnreadCount","anchorEl","setAnchorEl","notificationSound","Audio","savedNotifications","localStorage","getItem","parsedNotifications","JSON","parse","filter","notification","read","length","role","handleNewTicket","handleTicketAssigned","handleTicketAccepted","handleNewMessage","handleMessageReceived","setItem","stringify","data","newNotification","id","ticketId","Date","now","type","title","message","ticketNumber","clientName","timestamp","toISOString","addNotification","playNotificationSound","technicianName","messageId","senderName","senderId","userId","currentPath","window","location","pathname","ticketPath","includes","prev","updated","slice","currentTime","play","catch","error","console","handleClick","event","currentTarget","handleClose","handleNotificationClick","markAsRead","notificationId","map","markAllAsRead","removeNotification","clearAllNotifications","removeItem","formatTimestamp","date","diffInSeconds","Math","floor","minutes","hours","days","getNotificationIcon","color","variant","children","fileName","_jsxFileName","lineNumber","columnNumber","open","Boolean","size","onClick","badgeContent","onClose","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","style","maxHeight","width","sx","p","display","justifyContent","alignItems","bgcolor","fontWeight","fontSize","textAlign","cursor","py","secondaryAction","edge","e","stopPropagation","mr","primary","component","secondary","_c","$RefreshReg$"],"sources":["C:/Users/sayda/CascadeProjects/beta-tech-support/frontend/src/components/notifications/TicketNotification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { onSocketEvent, offSocketEvent } from '../../services/socketService';\nimport {\n  Badge,\n  Box,\n  Button,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  Menu,\n  MenuItem,\n  Popover,\n  Typography,\n  Tooltip,\n  Zoom\n} from '@mui/material';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport CloseIcon from '@mui/icons-material/Close';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport MarkChatReadIcon from '@mui/icons-material/MarkChatRead';\nimport MarkChatUnreadIcon from '@mui/icons-material/MarkChatUnread';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\n\nconst TicketNotification = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [notificationSound] = useState(new Audio('/notification.mp3'));\n\n  useEffect(() => {\n    // Load notifications from localStorage on component mount\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsedNotifications = JSON.parse(savedNotifications);\n      setNotifications(parsedNotifications);\n      setUnreadCount(parsedNotifications.filter(notification => !notification.read).length);\n    }\n\n    // Setup socket event listeners based on user role\n    if (user) {\n      // New ticket notification (for technicians and admins)\n      if (user.role === 'technician' || user.role === 'admin') {\n        onSocketEvent('new_ticket', handleNewTicket);\n        onSocketEvent('ticket_assigned', handleTicketAssigned);\n      }\n\n      // Ticket accepted notification (for clients)\n      if (user.role === 'client') {\n        onSocketEvent('ticket_accepted', handleTicketAccepted);\n      }\n\n      // New message notification (for all users)\n      onSocketEvent('new_message_notification', handleNewMessage);\n      onSocketEvent('message_received', handleMessageReceived);\n    }\n\n    // Cleanup event listeners on component unmount\n    return () => {\n      if (user) {\n        if (user.role === 'technician' || user.role === 'admin') {\n          offSocketEvent('new_ticket', handleNewTicket);\n          offSocketEvent('ticket_assigned', handleTicketAssigned);\n        }\n\n        if (user.role === 'client') {\n          offSocketEvent('ticket_accepted', handleTicketAccepted);\n        }\n\n        offSocketEvent('new_message_notification', handleNewMessage);\n        offSocketEvent('message_received', handleMessageReceived);\n      }\n    };\n  }, [user]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    if (notifications.length > 0) {\n      localStorage.setItem('notifications', JSON.stringify(notifications));\n      setUnreadCount(notifications.filter(notification => !notification.read).length);\n    }\n  }, [notifications]);\n\n  // Handler for new ticket notifications\n  const handleNewTicket = (data) => {\n    const newNotification = {\n      id: `ticket_${data.ticketId}_${Date.now()}`,\n      type: 'new_ticket',\n      title: 'New Ticket',\n      message: `New ticket #${data.ticketNumber} created by ${data.clientName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for ticket assignment notifications\n  const handleTicketAssigned = (data) => {\n    const newNotification = {\n      id: `assigned_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_assigned',\n      title: 'Ticket Assigned',\n      message: `Ticket #${data.ticketNumber} assigned to ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for ticket acceptance notifications\n  const handleTicketAccepted = (data) => {\n    const newNotification = {\n      id: `accepted_${data.ticketId}_${Date.now()}`,\n      type: 'ticket_accepted',\n      title: 'Ticket Accepted',\n      message: `Your ticket has been accepted by ${data.technicianName}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for new message notifications\n  const handleNewMessage = (data) => {\n    const newNotification = {\n      id: `message_${data.messageId}_${Date.now()}`,\n      type: 'new_message',\n      title: 'New Message',\n      message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n      ticketId: data.ticketId,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    addNotification(newNotification);\n    playNotificationSound();\n  };\n\n  // Handler for message received in current ticket view\n  const handleMessageReceived = (data) => {\n    // Only create notification if the message is not from the current user\n    if (data.senderId !== user.userId) {\n      const newNotification = {\n        id: `message_${data.messageId}_${Date.now()}`,\n        type: 'new_message',\n        title: 'New Message',\n        message: `New message from ${data.senderName} on ticket #${data.ticketNumber}`,\n        ticketId: data.ticketId,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n      \n      // Check if we're not already on this ticket's page\n      const currentPath = window.location.pathname;\n      const ticketPath = `/tickets/${data.ticketId}`;\n      \n      if (!currentPath.includes(ticketPath)) {\n        addNotification(newNotification);\n        playNotificationSound();\n      }\n    }\n  };\n\n  // Add a new notification to the list\n  const addNotification = (notification) => {\n    setNotifications(prev => {\n      // Limit to 20 notifications\n      const updated = [notification, ...prev].slice(0, 20);\n      return updated;\n    });\n  };\n\n  // Play notification sound\n  const playNotificationSound = () => {\n    try {\n      notificationSound.currentTime = 0;\n      notificationSound.play().catch(error => {\n        console.error('Error playing notification sound:', error);\n      });\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  };\n\n  // Handle click on notification icon\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  // Handle close of notification menu\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  // Handle click on a notification\n  const handleNotificationClick = (notification) => {\n    // Mark notification as read\n    markAsRead(notification.id);\n    \n    // Navigate to the ticket\n    navigate(`/tickets/${notification.ticketId}`);\n    \n    // Close the notification menu\n    handleClose();\n  };\n\n  // Mark a notification as read\n  const markAsRead = (notificationId) => {\n    setNotifications(prev => \n      prev.map(notification => \n        notification.id === notificationId \n          ? { ...notification, read: true } \n          : notification\n      )\n    );\n  };\n\n  // Mark all notifications as read\n  const markAllAsRead = () => {\n    setNotifications(prev => \n      prev.map(notification => ({ ...notification, read: true }))\n    );\n  };\n\n  // Remove a notification\n  const removeNotification = (notificationId) => {\n    setNotifications(prev => \n      prev.filter(notification => notification.id !== notificationId)\n    );\n  };\n\n  // Clear all notifications\n  const clearAllNotifications = () => {\n    setNotifications([]);\n    localStorage.removeItem('notifications');\n    handleClose();\n  };\n\n  // Format timestamp to relative time\n  const formatTimestamp = (timestamp) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInSeconds = Math.floor((now - date) / 1000);\n    \n    if (diffInSeconds < 60) {\n      return 'Just now';\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60);\n      return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;\n    } else if (diffInSeconds < 86400) {\n      const hours = Math.floor(diffInSeconds / 3600);\n      return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;\n    } else {\n      const days = Math.floor(diffInSeconds / 86400);\n      return `${days} ${days === 1 ? 'day' : 'days'} ago`;\n    }\n  };\n\n  // Get icon for notification type\n  const getNotificationIcon = (type) => {\n    switch (type) {\n      case 'new_ticket':\n        return <Badge color=\"error\" variant=\"dot\"><AccessTimeIcon color=\"primary\" /></Badge>;\n      case 'ticket_assigned':\n      case 'ticket_accepted':\n        return <CheckCircleIcon color=\"success\" />;\n      case 'new_message':\n        return <MarkChatUnreadIcon color=\"info\" />;\n      default:\n        return <NotificationsIcon />;\n    }\n  };\n\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <Tooltip title={unreadCount > 0 ? `${unreadCount} unread notifications` : 'No new notifications'}>\n        <IconButton\n          size=\"large\"\n          color=\"inherit\"\n          onClick={handleClick}\n          aria-label=\"show notifications\"\n          aria-controls=\"notifications-menu\"\n          aria-haspopup=\"true\"\n        >\n          <Badge badgeContent={unreadCount} color=\"error\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n      </Tooltip>\n      \n      <Popover\n        id=\"notifications-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        PaperProps={{\n          style: {\n            maxHeight: '400px',\n            width: '350px',\n          },\n        }}\n      >\n        <Box sx={{ p: 1, display: 'flex', justifyContent: 'space-between', alignItems: 'center', bgcolor: 'primary.main', color: 'white' }}>\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n            Notifications\n          </Typography>\n          <Box>\n            {unreadCount > 0 && (\n              <Tooltip title=\"Mark all as read\">\n                <IconButton size=\"small\" color=\"inherit\" onClick={markAllAsRead}>\n                  <MarkChatReadIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            )}\n            {notifications.length > 0 && (\n              <Tooltip title=\"Clear all notifications\">\n                <IconButton size=\"small\" color=\"inherit\" onClick={clearAllNotifications}>\n                  <CloseIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            )}\n          </Box>\n        </Box>\n        <Divider />\n        \n        {notifications.length === 0 ? (\n          <Box sx={{ p: 2, textAlign: 'center' }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No notifications\n            </Typography>\n          </Box>\n        ) : (\n          <List sx={{ p: 0 }}>\n            {notifications.map((notification) => (\n              <React.Fragment key={notification.id}>\n                <ListItem\n                  alignItems=\"flex-start\"\n                  sx={{\n                    bgcolor: notification.read ? 'transparent' : 'action.hover',\n                    '&:hover': { bgcolor: 'action.selected' },\n                    cursor: 'pointer',\n                    py: 1\n                  }}\n                  secondaryAction={\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"delete\"\n                      size=\"small\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        removeNotification(notification.id);\n                      }}\n                    >\n                      <CloseIcon fontSize=\"small\" />\n                    </IconButton>\n                  }\n                  onClick={() => handleNotificationClick(notification)}\n                >\n                  <Box sx={{ mr: 2, display: 'flex', alignItems: 'center' }}>\n                    {getNotificationIcon(notification.type)}\n                  </Box>\n                  <ListItemText\n                    primary={\n                      <Typography variant=\"subtitle2\" component=\"div\">\n                        {notification.title}\n                      </Typography>\n                    }\n                    secondary={\n                      <>\n                        <Typography variant=\"body2\" color=\"text.primary\" component=\"span\">\n                          {notification.message}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\" component=\"div\">\n                          {formatTimestamp(notification.timestamp)}\n                        </Typography>\n                      </>\n                    }\n                  />\n                </ListItem>\n                <Divider component=\"li\" />\n              </React.Fragment>\n            ))}\n          </List>\n        )}\n      </Popover>\n    </>\n  );\n};\n\nexport default TicketNotification;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}