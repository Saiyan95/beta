{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayda\\\\CascadeProjects\\\\beta-tech-support\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { getSocket, closeSocket } from '../services/socketService';\nimport { API_URL } from '../utils/apiConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on page load\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      const parsedUser = JSON.parse(userData);\n      setUser(parsedUser);\n      // Set default authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Initialize socket connection with auth token\n      initializeSocket(token);\n    }\n    setLoading(false);\n  }, []);\n\n  // Initialize socket with authentication token\n  const initializeSocket = token => {\n    try {\n      const socket = getSocket();\n      // Set auth token for socket connection\n      socket.auth = {\n        token\n      };\n      // Connect if not already connected\n      if (socket.disconnected) {\n        socket.connect();\n      }\n    } catch (error) {\n      console.error('Socket initialization error:', error);\n    }\n  };\n\n  // Register a new user\n  const register = async userData => {\n    setLoading(true);\n    try {\n      console.log('Registering with data:', userData);\n\n      // Updated endpoint to match backend expectations\n      const response = await axios.post(`${API_URL}/auth/register`, userData);\n      console.log('Registration response:', response.data);\n\n      // Handle response based on structure\n      const {\n        user,\n        token\n      } = response.data;\n\n      // Store auth data\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // Set default header for future requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Update state\n      setUser(user);\n\n      // Initialize socket with the new token\n      initializeSocket(token);\n      return user;\n    } catch (error) {\n      var _error$response;\n      console.error('Registration error:', error);\n      console.error('Error details:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (email, password, role) => {\n    setLoading(true);\n    try {\n      console.log(`Attempting login for ${email}`);\n      console.log('Role requested:', role); // Debug role parameter\n\n      // Use correct login API endpoint\n      const response = await axios.post(`${API_URL}/auth/login`, {\n        email,\n        password\n      });\n      console.log('Login response:', response.data);\n      const {\n        user,\n        token\n      } = response.data;\n\n      // Verify role matches if role parameter was provided\n      if (role && user.role !== role) {\n        console.error(`Role mismatch: Expected ${role}, got ${user.role}`);\n        throw new Error(`Unauthorized: ${role} access only`);\n      }\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // Set default header for future requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      setUser(user);\n\n      // Initialize socket with the new token\n      initializeSocket(token);\n      return user;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // Remove auth header\n    delete axios.defaults.headers.common['Authorization'];\n    setUser(null);\n\n    // Close socket connection\n    closeSocket();\n  };\n\n  // Provide auth context values\n  const value = {\n    user,\n    loading,\n    register,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","getSocket","closeSocket","API_URL","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","userData","parsedUser","JSON","parse","defaults","headers","common","initializeSocket","socket","auth","disconnected","connect","error","console","register","log","response","post","data","setItem","stringify","_error$response","message","login","email","password","role","Error","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sayda/CascadeProjects/beta-tech-support/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { getSocket, closeSocket } from '../services/socketService';\nimport { API_URL } from '../utils/apiConfig';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is logged in on page load\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    \n    if (token && userData) {\n      const parsedUser = JSON.parse(userData);\n      setUser(parsedUser);\n      // Set default authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      // Initialize socket connection with auth token\n      initializeSocket(token);\n    }\n    \n    setLoading(false);\n  }, []);\n\n  // Initialize socket with authentication token\n  const initializeSocket = (token) => {\n    try {\n      const socket = getSocket();\n      // Set auth token for socket connection\n      socket.auth = { token };\n      // Connect if not already connected\n      if (socket.disconnected) {\n        socket.connect();\n      }\n    } catch (error) {\n      console.error('Socket initialization error:', error);\n    }\n  };\n\n  // Register a new user\n  const register = async (userData) => {\n    setLoading(true);\n    try {\n      console.log('Registering with data:', userData);\n      \n      // Updated endpoint to match backend expectations\n      const response = await axios.post(\n        `${API_URL}/auth/register`,\n        userData\n      );\n\n      console.log('Registration response:', response.data);\n      \n      // Handle response based on structure\n      const { user, token } = response.data;\n      \n      // Store auth data\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      // Set default header for future requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      // Update state\n      setUser(user);\n      \n      // Initialize socket with the new token\n      initializeSocket(token);\n      \n      return user;\n    } catch (error) {\n      console.error('Registration error:', error);\n      console.error('Error details:', error.response?.data || error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (email, password, role) => {\n    setLoading(true);\n    try {\n      console.log(`Attempting login for ${email}`);\n      console.log('Role requested:', role); // Debug role parameter\n      \n      // Use correct login API endpoint\n      const response = await axios.post(`${API_URL}/auth/login`, {\n        email,\n        password\n      });\n\n      console.log('Login response:', response.data);\n      \n      const { user, token } = response.data;\n      \n      // Verify role matches if role parameter was provided\n      if (role && user.role !== role) {\n        console.error(`Role mismatch: Expected ${role}, got ${user.role}`);\n        throw new Error(`Unauthorized: ${role} access only`);\n      }\n      \n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      // Set default header for future requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      setUser(user);\n      \n      // Initialize socket with the new token\n      initializeSocket(token);\n      \n      return user;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    \n    // Remove auth header\n    delete axios.defaults.headers.common['Authorization'];\n    \n    setUser(null);\n    \n    // Close socket connection\n    closeSocket();\n  };\n\n  // Provide auth context values\n  const value = {\n    user,\n    loading,\n    register,\n    login,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}